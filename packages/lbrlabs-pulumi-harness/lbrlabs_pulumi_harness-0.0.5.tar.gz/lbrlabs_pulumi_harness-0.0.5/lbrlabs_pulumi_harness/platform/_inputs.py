# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AppDynamicsConnectorApiTokenArgs',
    'AppDynamicsConnectorUsernamePasswordArgs',
    'ArtifactoryConnectorCredentialsArgs',
    'AwsCCConnectorCrossAccountAccessArgs',
    'AwsConnectorCrossAccountAccessArgs',
    'AwsConnectorInheritFromDelegateArgs',
    'AwsConnectorIrsaArgs',
    'AwsConnectorManualArgs',
    'AwsKmsConnectorCredentialsArgs',
    'AwsKmsConnectorCredentialsAssumeRoleArgs',
    'AwsKmsConnectorCredentialsManualArgs',
    'AwsSecretManagerConnectorCredentialsArgs',
    'AwsSecretManagerConnectorCredentialsAssumeRoleArgs',
    'AwsSecretManagerConnectorCredentialsManualArgs',
    'BitbucketConnectorApiAuthenticationArgs',
    'BitbucketConnectorCredentialsArgs',
    'BitbucketConnectorCredentialsHttpArgs',
    'BitbucketConnectorCredentialsSshArgs',
    'DockerConnectorCredentialsArgs',
    'EnvironmentClustersMappingClusterArgs',
    'GcpConnectorInheritFromDelegateArgs',
    'GcpConnectorManualArgs',
    'GitConnectorCredentialsArgs',
    'GitConnectorCredentialsHttpArgs',
    'GitConnectorCredentialsSshArgs',
    'GitOpsAgentMetadataArgs',
    'GitOpsClusterQueryArgs',
    'GitOpsClusterQueryIdArgs',
    'GitOpsClusterRequestArgs',
    'GitOpsClusterRequestClusterArgs',
    'GitOpsClusterRequestClusterConfigArgs',
    'GitOpsClusterRequestClusterConfigAwsAuthConfigArgs',
    'GitOpsClusterRequestClusterConfigExecProviderConfigArgs',
    'GitOpsClusterRequestClusterConfigTlsClientConfigArgs',
    'GitOpsClusterRequestClusterInfoArgs',
    'GitOpsClusterRequestClusterInfoCacheInfoArgs',
    'GitOpsClusterRequestClusterInfoConnectionStateArgs',
    'GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs',
    'GitOpsClusterRequestClusterRefreshRequestedAtArgs',
    'GitOpsClusterRequestIdArgs',
    'GitOpsClusterRequestUpdateMaskArgs',
    'GitOpsRepositoryRepoArgs',
    'GitOpsRepositoryUpdateMaskArgs',
    'GithubConnectorApiAuthenticationArgs',
    'GithubConnectorApiAuthenticationGithubAppArgs',
    'GithubConnectorCredentialsArgs',
    'GithubConnectorCredentialsHttpArgs',
    'GithubConnectorCredentialsSshArgs',
    'GitlabConnectorApiAuthenticationArgs',
    'GitlabConnectorCredentialsArgs',
    'GitlabConnectorCredentialsHttpArgs',
    'GitlabConnectorCredentialsSshArgs',
    'HelmConnectorCredentialsArgs',
    'KubernetesConnectorClientKeyCertArgs',
    'KubernetesConnectorInheritFromDelegateArgs',
    'KubernetesConnectorOpenidConnectArgs',
    'KubernetesConnectorServiceAccountArgs',
    'KubernetesConnectorUsernamePasswordArgs',
    'NexusConnectorCredentialsArgs',
    'PrometheusConnectorHeaderArgs',
    'ResourceGroupIncludedScopeArgs',
    'ResourceGroupResourceFilterArgs',
    'ResourceGroupResourceFilterResourceArgs',
    'ResourceGroupResourceFilterResourceAttributeFilterArgs',
    'RoleAssignmentsPrincipalArgs',
    'SecretSshkeyKerberosArgs',
    'SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs',
    'SecretSshkeyKerberosTgtPasswordSpecArgs',
    'SecretSshkeySshArgs',
    'SecretSshkeySshSshPasswordCredentialArgs',
    'SecretSshkeySshSshkeyPathCredentialArgs',
    'SecretSshkeySshSshkeyReferenceCredentialArgs',
    'UsergroupNotificationConfigArgs',
    'VariablesSpecArgs',
    'GetGitopsAgentMetadataArgs',
    'GetGitopsClusterQueryArgs',
    'GetGitopsClusterQueryIdArgs',
    'GetGitopsClusterRequestArgs',
    'GetGitopsClusterRequestClusterArgs',
    'GetGitopsClusterRequestClusterConfigArgs',
    'GetGitopsClusterRequestClusterConfigAwsAuthConfigArgs',
    'GetGitopsClusterRequestClusterConfigExecProviderConfigArgs',
    'GetGitopsClusterRequestClusterConfigTlsClientConfigArgs',
    'GetGitopsClusterRequestClusterInfoArgs',
    'GetGitopsClusterRequestClusterInfoCacheInfoArgs',
    'GetGitopsClusterRequestClusterInfoConnectionStateArgs',
    'GetGitopsClusterRequestClusterInfoConnectionStateAttemptedAtArgs',
    'GetGitopsClusterRequestClusterRefreshRequestedAtArgs',
    'GetGitopsClusterRequestIdArgs',
    'GetGitopsClusterRequestUpdateMaskArgs',
    'GetGitopsRepositoryRepoArgs',
    'GetGitopsRepositoryUpdateMaskArgs',
    'GetRoleAssignmentsPrincipalArgs',
    'GetUsergroupNotificationConfigArgs',
]

@pulumi.input_type
class AppDynamicsConnectorApiTokenArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_id: The client id used for connecting to App Dynamics.
        :param pulumi.Input[str] client_secret_ref: Reference to the Harness secret containing the App Dynamics client secret.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret_ref", client_secret_ref)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The client id used for connecting to App Dynamics.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretRef")
    def client_secret_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the App Dynamics client secret.
        """
        return pulumi.get(self, "client_secret_ref")

    @client_secret_ref.setter
    def client_secret_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret_ref", value)


@pulumi.input_type
class AppDynamicsConnectorUsernamePasswordArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication.
        :param pulumi.Input[str] username: Username to use for authentication.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ArtifactoryConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class AwsCCConnectorCrossAccountAccessArgs:
    def __init__(__self__, *,
                 external_id: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] external_id: The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.
        :param pulumi.Input[str] role_arn: The ARN of the role to use for cross-account access.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Input[str]:
        """
        The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the role to use for cross-account access.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class AwsConnectorCrossAccountAccessArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.
        :param pulumi.Input[str] external_id: If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)


@pulumi.input_type
class AwsConnectorInheritFromDelegateArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to inherit the credentials from.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to inherit the credentials from.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class AwsConnectorIrsaArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to inherit the credentials from.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to inherit the credentials from.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class AwsConnectorManualArgs:
    def __init__(__self__, *,
                 secret_key_ref: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_key_ref: Optional[pulumi.Input[str]] = None,
                 delegate_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] secret_key_ref: Reference to the Harness secret containing the aws secret key.
        :param pulumi.Input[str] access_key: AWS access key.
        :param pulumi.Input[str] access_key_ref: Reference to the Harness secret containing the aws access key.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: Connect only use delegates with these tags.
        """
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_key_ref is not None:
            pulumi.set(__self__, "access_key_ref", access_key_ref)
        if delegate_selectors is not None:
            pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the aws secret key.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessKeyRef")
    def access_key_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the Harness secret containing the aws access key.
        """
        return pulumi.get(self, "access_key_ref")

    @access_key_ref.setter
    def access_key_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_ref", value)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Connect only use delegates with these tags.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class AwsKmsConnectorCredentialsArgs:
    def __init__(__self__, *,
                 assume_role: Optional[pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs']] = None,
                 inherit_from_delegate: Optional[pulumi.Input[bool]] = None,
                 manual: Optional[pulumi.Input['AwsKmsConnectorCredentialsManualArgs']] = None):
        """
        :param pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs'] assume_role: Connect using STS assume role.
        :param pulumi.Input[bool] inherit_from_delegate: Inherit the credentials from from the delegate.
        :param pulumi.Input['AwsKmsConnectorCredentialsManualArgs'] manual: Specify the AWS key and secret used for authenticating.
        """
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if inherit_from_delegate is not None:
            pulumi.set(__self__, "inherit_from_delegate", inherit_from_delegate)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs']]:
        """
        Connect using STS assume role.
        """
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs']]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="inheritFromDelegate")
    def inherit_from_delegate(self) -> Optional[pulumi.Input[bool]]:
        """
        Inherit the credentials from from the delegate.
        """
        return pulumi.get(self, "inherit_from_delegate")

    @inherit_from_delegate.setter
    def inherit_from_delegate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_from_delegate", value)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['AwsKmsConnectorCredentialsManualArgs']]:
        """
        Specify the AWS key and secret used for authenticating.
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['AwsKmsConnectorCredentialsManualArgs']]):
        pulumi.set(self, "manual", value)


@pulumi.input_type
class AwsKmsConnectorCredentialsAssumeRoleArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 role_arn: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)


@pulumi.input_type
class AwsKmsConnectorCredentialsManualArgs:
    def __init__(__self__, *,
                 access_key_ref: pulumi.Input[str],
                 secret_key_ref: pulumi.Input[str]):
        pulumi.set(__self__, "access_key_ref", access_key_ref)
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="accessKeyRef")
    def access_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_ref")

    @access_key_ref.setter
    def access_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class AwsSecretManagerConnectorCredentialsArgs:
    def __init__(__self__, *,
                 assume_role: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs']] = None,
                 inherit_from_delegate: Optional[pulumi.Input[bool]] = None,
                 manual: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs']] = None):
        """
        :param pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs'] assume_role: Connect using STS assume role.
        :param pulumi.Input[bool] inherit_from_delegate: Inherit the credentials from from the delegate.
        :param pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs'] manual: Specify the AWS key and secret used for authenticating.
        """
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if inherit_from_delegate is not None:
            pulumi.set(__self__, "inherit_from_delegate", inherit_from_delegate)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs']]:
        """
        Connect using STS assume role.
        """
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs']]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="inheritFromDelegate")
    def inherit_from_delegate(self) -> Optional[pulumi.Input[bool]]:
        """
        Inherit the credentials from from the delegate.
        """
        return pulumi.get(self, "inherit_from_delegate")

    @inherit_from_delegate.setter
    def inherit_from_delegate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_from_delegate", value)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs']]:
        """
        Specify the AWS key and secret used for authenticating.
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs']]):
        pulumi.set(self, "manual", value)


@pulumi.input_type
class AwsSecretManagerConnectorCredentialsAssumeRoleArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 role_arn: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)


@pulumi.input_type
class AwsSecretManagerConnectorCredentialsManualArgs:
    def __init__(__self__, *,
                 access_key_ref: pulumi.Input[str],
                 secret_key_ref: pulumi.Input[str]):
        pulumi.set(__self__, "access_key_ref", access_key_ref)
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="accessKeyRef")
    def access_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_ref")

    @access_key_ref.setter
    def access_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class BitbucketConnectorApiAuthenticationArgs:
    def __init__(__self__, *,
                 token_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] token_ref: Personal access token for interacting with the BitBucket api.
        :param pulumi.Input[str] username: The username used for connecting to the api.
        :param pulumi.Input[str] username_ref: The name of the Harness secret containing the username.
        """
        pulumi.set(__self__, "token_ref", token_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> pulumi.Input[str]:
        """
        Personal access token for interacting with the BitBucket api.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username used for connecting to the api.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Harness secret containing the username.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class BitbucketConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['BitbucketConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['BitbucketConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['BitbucketConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['BitbucketConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['BitbucketConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['BitbucketConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['BitbucketConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['BitbucketConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class BitbucketConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 password_ref: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class BitbucketConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class DockerConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: The reference to the password to use for the docker registry.
        :param pulumi.Input[str] username: The username to use for the docker registry.
        :param pulumi.Input[str] username_ref: The reference to the username to use for the docker registry.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        The reference to the password to use for the docker registry.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username to use for the docker registry.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The reference to the username to use for the docker registry.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class EnvironmentClustersMappingClusterArgs:
    def __init__(__self__, *,
                 identifier: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identifier: account Identifier of the account
        :param pulumi.Input[str] name: name of the cluster
        :param pulumi.Input[str] scope: scope at which the cluster exists in harness gitops, project vs org vs account
        """
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        account Identifier of the account
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        scope at which the cluster exists in harness gitops, project vs org vs account
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class GcpConnectorInheritFromDelegateArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to inherit the credentials from.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to inherit the credentials from.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class GcpConnectorManualArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 secret_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to connect with.
        :param pulumi.Input[str] secret_key_ref: Reference to the Harness secret containing the secret key.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to connect with.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the secret key.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class GitConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['GitConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['GitConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['GitConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['GitConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['GitConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['GitConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['GitConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['GitConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class GitConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class GitConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class GitOpsAgentMetadataArgs:
    def __init__(__self__, *,
                 high_availability: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "high_availability")

    @high_availability.setter
    def high_availability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "high_availability", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GitOpsClusterQueryArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterQueryIdArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterQueryIdArgs']]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterQueryIdArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class GitOpsClusterQueryIdArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsClusterRequestArgs:
    def __init__(__self__, *,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterArgs']]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestIdArgs']]]] = None,
                 update_masks: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestUpdateMaskArgs']]]] = None,
                 updated_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if update_masks is not None:
            pulumi.set(__self__, "update_masks", update_masks)
        if updated_fields is not None:
            pulumi.set(__self__, "updated_fields", updated_fields)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterArgs']]]]:
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterArgs']]]]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestIdArgs']]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestIdArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter(name="updateMasks")
    def update_masks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestUpdateMaskArgs']]]]:
        return pulumi.get(self, "update_masks")

    @update_masks.setter
    def update_masks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestUpdateMaskArgs']]]]):
        pulumi.set(self, "update_masks", value)

    @property
    @pulumi.getter(name="updatedFields")
    def updated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "updated_fields")

    @updated_fields.setter
    def updated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "updated_fields", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class GitOpsClusterRequestClusterArgs:
    def __init__(__self__, *,
                 server: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_resources: Optional[pulumi.Input[bool]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigArgs']]]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 refresh_requested_ats: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterRefreshRequestedAtArgs']]]] = None,
                 shard: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "server", server)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if cluster_resources is not None:
            pulumi.set(__self__, "cluster_resources", cluster_resources)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if refresh_requested_ats is not None:
            pulumi.set(__self__, "refresh_requested_ats", refresh_requested_ats)
        if shard is not None:
            pulumi.set(__self__, "shard", shard)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterResources")
    def cluster_resources(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cluster_resources")

    @cluster_resources.setter
    def cluster_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_resources", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigArgs']]]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoArgs']]]]:
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="refreshRequestedAts")
    def refresh_requested_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterRefreshRequestedAtArgs']]]]:
        return pulumi.get(self, "refresh_requested_ats")

    @refresh_requested_ats.setter
    def refresh_requested_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterRefreshRequestedAtArgs']]]]):
        pulumi.set(self, "refresh_requested_ats", value)

    @property
    @pulumi.getter
    def shard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shard")

    @shard.setter
    def shard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shard", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigArgs:
    def __init__(__self__, *,
                 aws_auth_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigAwsAuthConfigArgs']]]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 cluster_connection_type: Optional[pulumi.Input[str]] = None,
                 exec_provider_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigExecProviderConfigArgs']]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tls_client_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigTlsClientConfigArgs']]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if aws_auth_configs is not None:
            pulumi.set(__self__, "aws_auth_configs", aws_auth_configs)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if cluster_connection_type is not None:
            pulumi.set(__self__, "cluster_connection_type", cluster_connection_type)
        if exec_provider_configs is not None:
            pulumi.set(__self__, "exec_provider_configs", exec_provider_configs)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_client_configs is not None:
            pulumi.set(__self__, "tls_client_configs", tls_client_configs)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="awsAuthConfigs")
    def aws_auth_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigAwsAuthConfigArgs']]]]:
        return pulumi.get(self, "aws_auth_configs")

    @aws_auth_configs.setter
    def aws_auth_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigAwsAuthConfigArgs']]]]):
        pulumi.set(self, "aws_auth_configs", value)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="clusterConnectionType")
    def cluster_connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_connection_type")

    @cluster_connection_type.setter
    def cluster_connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_connection_type", value)

    @property
    @pulumi.getter(name="execProviderConfigs")
    def exec_provider_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigExecProviderConfigArgs']]]]:
        return pulumi.get(self, "exec_provider_configs")

    @exec_provider_configs.setter
    def exec_provider_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigExecProviderConfigArgs']]]]):
        pulumi.set(self, "exec_provider_configs", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tlsClientConfigs")
    def tls_client_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigTlsClientConfigArgs']]]]:
        return pulumi.get(self, "tls_client_configs")

    @tls_client_configs.setter
    def tls_client_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigTlsClientConfigArgs']]]]):
        pulumi.set(self, "tls_client_configs", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigAwsAuthConfigArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="roleARN")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigExecProviderConfigArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 install_hint: Optional[pulumi.Input[str]] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if install_hint is not None:
            pulumi.set(__self__, "install_hint", install_hint)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="installHint")
    def install_hint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "install_hint")

    @install_hint.setter
    def install_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "install_hint", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigTlsClientConfigArgs:
    def __init__(__self__, *,
                 ca_data: Optional[pulumi.Input[str]] = None,
                 cert_data: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 key_data: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        if ca_data is not None:
            pulumi.set(__self__, "ca_data", ca_data)
        if cert_data is not None:
            pulumi.set(__self__, "cert_data", cert_data)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="caData")
    def ca_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_data")

    @ca_data.setter
    def ca_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_data", value)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_data")

    @cert_data.setter
    def cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_data", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoArgs:
    def __init__(__self__, *,
                 api_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 applications_count: Optional[pulumi.Input[str]] = None,
                 cache_infos: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoCacheInfoArgs']]]] = None,
                 connection_states: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateArgs']]]] = None,
                 server_version: Optional[pulumi.Input[str]] = None):
        if api_versions is not None:
            pulumi.set(__self__, "api_versions", api_versions)
        if applications_count is not None:
            pulumi.set(__self__, "applications_count", applications_count)
        if cache_infos is not None:
            pulumi.set(__self__, "cache_infos", cache_infos)
        if connection_states is not None:
            pulumi.set(__self__, "connection_states", connection_states)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)

    @property
    @pulumi.getter(name="apiVersions")
    def api_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "api_versions")

    @api_versions.setter
    def api_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_versions", value)

    @property
    @pulumi.getter(name="applicationsCount")
    def applications_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_count")

    @applications_count.setter
    def applications_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_count", value)

    @property
    @pulumi.getter(name="cacheInfos")
    def cache_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoCacheInfoArgs']]]]:
        return pulumi.get(self, "cache_infos")

    @cache_infos.setter
    def cache_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoCacheInfoArgs']]]]):
        pulumi.set(self, "cache_infos", value)

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateArgs']]]]:
        return pulumi.get(self, "connection_states")

    @connection_states.setter
    def connection_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateArgs']]]]):
        pulumi.set(self, "connection_states", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_version", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoCacheInfoArgs:
    def __init__(__self__, *,
                 apis_count: Optional[pulumi.Input[str]] = None,
                 last_cache_sync_time: Optional[pulumi.Input[str]] = None,
                 resources_count: Optional[pulumi.Input[str]] = None):
        if apis_count is not None:
            pulumi.set(__self__, "apis_count", apis_count)
        if last_cache_sync_time is not None:
            pulumi.set(__self__, "last_cache_sync_time", last_cache_sync_time)
        if resources_count is not None:
            pulumi.set(__self__, "resources_count", resources_count)

    @property
    @pulumi.getter(name="apisCount")
    def apis_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apis_count")

    @apis_count.setter
    def apis_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apis_count", value)

    @property
    @pulumi.getter(name="lastCacheSyncTime")
    def last_cache_sync_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_cache_sync_time")

    @last_cache_sync_time.setter
    def last_cache_sync_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_cache_sync_time", value)

    @property
    @pulumi.getter(name="resourcesCount")
    def resources_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resources_count")

    @resources_count.setter
    def resources_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resources_count", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoConnectionStateArgs:
    def __init__(__self__, *,
                 attempted_ats: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if attempted_ats is not None:
            pulumi.set(__self__, "attempted_ats", attempted_ats)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="attemptedAts")
    def attempted_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]]]:
        return pulumi.get(self, "attempted_ats")

    @attempted_ats.setter
    def attempted_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]]]):
        pulumi.set(self, "attempted_ats", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seconds", value)


@pulumi.input_type
class GitOpsClusterRequestClusterRefreshRequestedAtArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seconds", value)


@pulumi.input_type
class GitOpsClusterRequestIdArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsClusterRequestUpdateMaskArgs:
    def __init__(__self__, *,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GitOpsRepositoryRepoArgs:
    def __init__(__self__, *,
                 connection_type: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 enable_lfs: Optional[pulumi.Input[bool]] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 github_app_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 github_app_id: Optional[pulumi.Input[str]] = None,
                 github_app_installation_id: Optional[pulumi.Input[str]] = None,
                 github_app_private_key: Optional[pulumi.Input[str]] = None,
                 inherited_creds: Optional[pulumi.Input[bool]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 insecure_ignore_host_key: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 type_: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "repo", repo)
        if enable_lfs is not None:
            pulumi.set(__self__, "enable_lfs", enable_lfs)
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if github_app_enterprise_base_url is not None:
            pulumi.set(__self__, "github_app_enterprise_base_url", github_app_enterprise_base_url)
        if github_app_id is not None:
            pulumi.set(__self__, "github_app_id", github_app_id)
        if github_app_installation_id is not None:
            pulumi.set(__self__, "github_app_installation_id", github_app_installation_id)
        if github_app_private_key is not None:
            pulumi.set(__self__, "github_app_private_key", github_app_private_key)
        if inherited_creds is not None:
            pulumi.set(__self__, "inherited_creds", inherited_creds)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if insecure_ignore_host_key is not None:
            pulumi.set(__self__, "insecure_ignore_host_key", insecure_ignore_host_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if type_ is not None:
            pulumi.set(__self__, "type_", type_)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter(name="enableLfs")
    def enable_lfs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_lfs")

    @enable_lfs.setter
    def enable_lfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_lfs", value)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubAppEnterpriseBaseUrl")
    def github_app_enterprise_base_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "github_app_enterprise_base_url")

    @github_app_enterprise_base_url.setter
    def github_app_enterprise_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubAppId")
    def github_app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "github_app_id")

    @github_app_id.setter
    def github_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_id", value)

    @property
    @pulumi.getter(name="githubAppInstallationId")
    def github_app_installation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "github_app_installation_id")

    @github_app_installation_id.setter
    def github_app_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_installation_id", value)

    @property
    @pulumi.getter(name="githubAppPrivateKey")
    def github_app_private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "github_app_private_key")

    @github_app_private_key.setter
    def github_app_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_private_key", value)

    @property
    @pulumi.getter(name="inheritedCreds")
    def inherited_creds(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inherited_creds")

    @inherited_creds.setter
    def inherited_creds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherited_creds", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="insecureIgnoreHostKey")
    def insecure_ignore_host_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure_ignore_host_key")

    @insecure_ignore_host_key.setter
    def insecure_ignore_host_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_ignore_host_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def type_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_")

    @type_.setter
    def type_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GitOpsRepositoryUpdateMaskArgs:
    def __init__(__self__, *,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GithubConnectorApiAuthenticationArgs:
    def __init__(__self__, *,
                 github_app: Optional[pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs']] = None,
                 token_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs'] github_app: Configuration for using the github app for interacting with the github api.
        :param pulumi.Input[str] token_ref: Personal access token for interacting with the github api.
        """
        if github_app is not None:
            pulumi.set(__self__, "github_app", github_app)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter(name="githubApp")
    def github_app(self) -> Optional[pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs']]:
        """
        Configuration for using the github app for interacting with the github api.
        """
        return pulumi.get(self, "github_app")

    @github_app.setter
    def github_app(self, value: Optional[pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs']]):
        pulumi.set(self, "github_app", value)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Personal access token for interacting with the github api.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_ref", value)


@pulumi.input_type
class GithubConnectorApiAuthenticationGithubAppArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 installation_id: pulumi.Input[str],
                 private_key_ref: pulumi.Input[str]):
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "installation_id", installation_id)
        pulumi.set(__self__, "private_key_ref", private_key_ref)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="installationId")
    def installation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "installation_id")

    @installation_id.setter
    def installation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "installation_id", value)

    @property
    @pulumi.getter(name="privateKeyRef")
    def private_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key_ref")

    @private_key_ref.setter
    def private_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key_ref", value)


@pulumi.input_type
class GithubConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['GithubConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['GithubConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['GithubConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['GithubConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['GithubConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['GithubConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['GithubConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['GithubConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class GithubConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 token_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "token_ref", token_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class GithubConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class GitlabConnectorApiAuthenticationArgs:
    def __init__(__self__, *,
                 token_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] token_ref: Personal access token for interacting with the gitlab api.
        """
        pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> pulumi.Input[str]:
        """
        Personal access token for interacting with the gitlab api.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_ref", value)


@pulumi.input_type
class GitlabConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['GitlabConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['GitlabConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['GitlabConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['GitlabConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['GitlabConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['GitlabConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['GitlabConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['GitlabConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class GitlabConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 password_ref: Optional[pulumi.Input[str]] = None,
                 token_ref: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class GitlabConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class HelmConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class KubernetesConnectorClientKeyCertArgs:
    def __init__(__self__, *,
                 client_cert_ref: pulumi.Input[str],
                 client_key_algorithm: pulumi.Input[str],
                 client_key_ref: pulumi.Input[str],
                 master_url: pulumi.Input[str],
                 ca_cert_ref: Optional[pulumi.Input[str]] = None,
                 client_key_passphrase_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_cert_ref: Reference to the secret containing the client certificate for the connector.
        :param pulumi.Input[str] client_key_algorithm: The algorithm used to generate the client key for the connector. Valid values are RSA, EC
        :param pulumi.Input[str] client_key_ref: Reference to the secret containing the client key for the connector.
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] ca_cert_ref: Reference to the secret containing the CA certificate for the connector.
        :param pulumi.Input[str] client_key_passphrase_ref: Reference to the secret containing the client key passphrase for the connector.
        """
        pulumi.set(__self__, "client_cert_ref", client_cert_ref)
        pulumi.set(__self__, "client_key_algorithm", client_key_algorithm)
        pulumi.set(__self__, "client_key_ref", client_key_ref)
        pulumi.set(__self__, "master_url", master_url)
        if ca_cert_ref is not None:
            pulumi.set(__self__, "ca_cert_ref", ca_cert_ref)
        if client_key_passphrase_ref is not None:
            pulumi.set(__self__, "client_key_passphrase_ref", client_key_passphrase_ref)

    @property
    @pulumi.getter(name="clientCertRef")
    def client_cert_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the client certificate for the connector.
        """
        return pulumi.get(self, "client_cert_ref")

    @client_cert_ref.setter
    def client_cert_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_cert_ref", value)

    @property
    @pulumi.getter(name="clientKeyAlgorithm")
    def client_key_algorithm(self) -> pulumi.Input[str]:
        """
        The algorithm used to generate the client key for the connector. Valid values are RSA, EC
        """
        return pulumi.get(self, "client_key_algorithm")

    @client_key_algorithm.setter
    def client_key_algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key_algorithm", value)

    @property
    @pulumi.getter(name="clientKeyRef")
    def client_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the client key for the connector.
        """
        return pulumi.get(self, "client_key_ref")

    @client_key_ref.setter
    def client_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key_ref", value)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="caCertRef")
    def ca_cert_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the CA certificate for the connector.
        """
        return pulumi.get(self, "ca_cert_ref")

    @ca_cert_ref.setter
    def ca_cert_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert_ref", value)

    @property
    @pulumi.getter(name="clientKeyPassphraseRef")
    def client_key_passphrase_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the client key passphrase for the connector.
        """
        return pulumi.get(self, "client_key_passphrase_ref")

    @client_key_passphrase_ref.setter
    def client_key_passphrase_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_passphrase_ref", value)


@pulumi.input_type
class KubernetesConnectorInheritFromDelegateArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: Selectors to use for the delegate.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Selectors to use for the delegate.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class KubernetesConnectorOpenidConnectArgs:
    def __init__(__self__, *,
                 client_id_ref: pulumi.Input[str],
                 issuer_url: pulumi.Input[str],
                 master_url: pulumi.Input[str],
                 password_ref: pulumi.Input[str],
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_ref: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id_ref: Reference to the secret containing the client ID for the connector.
        :param pulumi.Input[str] issuer_url: The URL of the OpenID Connect issuer.
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] password_ref: Reference to the secret containing the password for the connector.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: Scopes to request for the connector.
        :param pulumi.Input[str] secret_ref: Reference to the secret containing the client secret for the connector.
        :param pulumi.Input[str] username: Username for the connector.
        :param pulumi.Input[str] username_ref: Reference to the secret containing the username for the connector.
        """
        pulumi.set(__self__, "client_id_ref", client_id_ref)
        pulumi.set(__self__, "issuer_url", issuer_url)
        pulumi.set(__self__, "master_url", master_url)
        pulumi.set(__self__, "password_ref", password_ref)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="clientIdRef")
    def client_id_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the client ID for the connector.
        """
        return pulumi.get(self, "client_id_ref")

    @client_id_ref.setter
    def client_id_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id_ref", value)

    @property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> pulumi.Input[str]:
        """
        The URL of the OpenID Connect issuer.
        """
        return pulumi.get(self, "issuer_url")

    @issuer_url.setter
    def issuer_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer_url", value)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the password for the connector.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Scopes to request for the connector.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the client secret for the connector.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for the connector.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the username for the connector.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class KubernetesConnectorServiceAccountArgs:
    def __init__(__self__, *,
                 master_url: pulumi.Input[str],
                 service_account_token_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] service_account_token_ref: Reference to the secret containing the service account token for the connector.
        """
        pulumi.set(__self__, "master_url", master_url)
        pulumi.set(__self__, "service_account_token_ref", service_account_token_ref)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="serviceAccountTokenRef")
    def service_account_token_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the service account token for the connector.
        """
        return pulumi.get(self, "service_account_token_ref")

    @service_account_token_ref.setter
    def service_account_token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_token_ref", value)


@pulumi.input_type
class KubernetesConnectorUsernamePasswordArgs:
    def __init__(__self__, *,
                 master_url: pulumi.Input[str],
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] password_ref: Reference to the secret containing the password for the connector.
        :param pulumi.Input[str] username: Username for the connector.
        :param pulumi.Input[str] username_ref: Reference to the secret containing the username for the connector.
        """
        pulumi.set(__self__, "master_url", master_url)
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the password for the connector.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for the connector.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the username for the connector.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class NexusConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class PrometheusConnectorHeaderArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 encrypted_value_ref: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value_encrypted: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: Key.
        :param pulumi.Input[str] encrypted_value_ref: Encrypted value reference.
        :param pulumi.Input[str] value: Value.
        :param pulumi.Input[bool] value_encrypted: Encrypted value.
        """
        pulumi.set(__self__, "key", key)
        if encrypted_value_ref is not None:
            pulumi.set(__self__, "encrypted_value_ref", encrypted_value_ref)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_encrypted is not None:
            pulumi.set(__self__, "value_encrypted", value_encrypted)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="encryptedValueRef")
    def encrypted_value_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypted value reference.
        """
        return pulumi.get(self, "encrypted_value_ref")

    @encrypted_value_ref.setter
    def encrypted_value_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_value_ref", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueEncrypted")
    def value_encrypted(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypted value.
        """
        return pulumi.get(self, "value_encrypted")

    @value_encrypted.setter
    def value_encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value_encrypted", value)


@pulumi.input_type
class ResourceGroupIncludedScopeArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] filter: Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES
        :param pulumi.Input[str] account_id: Account Identifier of the account
        :param pulumi.Input[str] org_id: Organization Identifier
        :param pulumi.Input[str] project_id: Project Identifier
        """
        pulumi.set(__self__, "filter", filter)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[str]:
        """
        Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account Identifier of the account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Organization Identifier
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Identifier
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class ResourceGroupResourceFilterArgs:
    def __init__(__self__, *,
                 include_all_resources: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]]] = None):
        """
        :param pulumi.Input[bool] include_all_resources: Include all resource or not
        :param pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]] resources: Resources for a resource group
        """
        if include_all_resources is not None:
            pulumi.set(__self__, "include_all_resources", include_all_resources)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="includeAllResources")
    def include_all_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Include all resource or not
        """
        return pulumi.get(self, "include_all_resources")

    @include_all_resources.setter
    def include_all_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_all_resources", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]]]:
        """
        Resources for a resource group
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ResourceGroupResourceFilterResourceArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 attribute_filters: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceAttributeFilterArgs']]]] = None,
                 identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "resource_type", resource_type)
        if attribute_filters is not None:
            pulumi.set(__self__, "attribute_filters", attribute_filters)
        if identifiers is not None:
            pulumi.set(__self__, "identifiers", identifiers)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="attributeFilters")
    def attribute_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceAttributeFilterArgs']]]]:
        return pulumi.get(self, "attribute_filters")

    @attribute_filters.setter
    def attribute_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceAttributeFilterArgs']]]]):
        pulumi.set(self, "attribute_filters", value)

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "identifiers")

    @identifiers.setter
    def identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identifiers", value)


@pulumi.input_type
class ResourceGroupResourceFilterResourceAttributeFilterArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_values is not None:
            pulumi.set(__self__, "attribute_values", attribute_values)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValues")
    def attribute_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attribute_values")

    @attribute_values.setter
    def attribute_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attribute_values", value)


@pulumi.input_type
class RoleAssignmentsPrincipalArgs:
    def __init__(__self__, *,
                 identifier: Optional[pulumi.Input[str]] = None,
                 scope_level: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identifier: Identifier.
        :param pulumi.Input[str] scope_level: Scope level.
        :param pulumi.Input[str] type: Type.
        """
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if scope_level is not None:
            pulumi.set(__self__, "scope_level", scope_level)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="scopeLevel")
    def scope_level(self) -> Optional[pulumi.Input[str]]:
        """
        Scope level.
        """
        return pulumi.get(self, "scope_level")

    @scope_level.setter
    def scope_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_level", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SecretSshkeyKerberosArgs:
    def __init__(__self__, *,
                 principal: pulumi.Input[str],
                 realm: pulumi.Input[str],
                 tgt_generation_method: Optional[pulumi.Input[str]] = None,
                 tgt_key_tab_file_path_spec: Optional[pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs']] = None,
                 tgt_password_spec: Optional[pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs']] = None):
        """
        :param pulumi.Input[str] principal: Username to use for authentication.
        :param pulumi.Input[str] realm: Reference to a secret containing the password to use for authentication.
        :param pulumi.Input[str] tgt_generation_method: Method to generate tgt
        :param pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs'] tgt_key_tab_file_path_spec: Authenticate to App Dynamics using username and password.
        :param pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs'] tgt_password_spec: Authenticate to App Dynamics using username and password.
        """
        pulumi.set(__self__, "principal", principal)
        pulumi.set(__self__, "realm", realm)
        if tgt_generation_method is not None:
            pulumi.set(__self__, "tgt_generation_method", tgt_generation_method)
        if tgt_key_tab_file_path_spec is not None:
            pulumi.set(__self__, "tgt_key_tab_file_path_spec", tgt_key_tab_file_path_spec)
        if tgt_password_spec is not None:
            pulumi.set(__self__, "tgt_password_spec", tgt_password_spec)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="tgtGenerationMethod")
    def tgt_generation_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to generate tgt
        """
        return pulumi.get(self, "tgt_generation_method")

    @tgt_generation_method.setter
    def tgt_generation_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tgt_generation_method", value)

    @property
    @pulumi.getter(name="tgtKeyTabFilePathSpec")
    def tgt_key_tab_file_path_spec(self) -> Optional[pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs']]:
        """
        Authenticate to App Dynamics using username and password.
        """
        return pulumi.get(self, "tgt_key_tab_file_path_spec")

    @tgt_key_tab_file_path_spec.setter
    def tgt_key_tab_file_path_spec(self, value: Optional[pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs']]):
        pulumi.set(self, "tgt_key_tab_file_path_spec", value)

    @property
    @pulumi.getter(name="tgtPasswordSpec")
    def tgt_password_spec(self) -> Optional[pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs']]:
        """
        Authenticate to App Dynamics using username and password.
        """
        return pulumi.get(self, "tgt_password_spec")

    @tgt_password_spec.setter
    def tgt_password_spec(self, value: Optional[pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs']]):
        pulumi.set(self, "tgt_password_spec", value)


@pulumi.input_type
class SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs:
    def __init__(__self__, *,
                 key_path: Optional[pulumi.Input[str]] = None):
        if key_path is not None:
            pulumi.set(__self__, "key_path", key_path)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_path")

    @key_path.setter
    def key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_path", value)


@pulumi.input_type
class SecretSshkeyKerberosTgtPasswordSpecArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class SecretSshkeySshArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 ssh_password_credential: Optional[pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs']] = None,
                 sshkey_path_credential: Optional[pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs']] = None,
                 sshkey_reference_credential: Optional[pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs']] = None):
        """
        :param pulumi.Input[str] credential_type: This specifies SSH credential type as Password, KeyPath or KeyReference
        :param pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs'] ssh_password_credential: SSH credential of type keyReference
        :param pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs'] sshkey_path_credential: SSH credential of type keyPath
        :param pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs'] sshkey_reference_credential: SSH credential of type keyReference
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if ssh_password_credential is not None:
            pulumi.set(__self__, "ssh_password_credential", ssh_password_credential)
        if sshkey_path_credential is not None:
            pulumi.set(__self__, "sshkey_path_credential", sshkey_path_credential)
        if sshkey_reference_credential is not None:
            pulumi.set(__self__, "sshkey_reference_credential", sshkey_reference_credential)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        """
        This specifies SSH credential type as Password, KeyPath or KeyReference
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="sshPasswordCredential")
    def ssh_password_credential(self) -> Optional[pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs']]:
        """
        SSH credential of type keyReference
        """
        return pulumi.get(self, "ssh_password_credential")

    @ssh_password_credential.setter
    def ssh_password_credential(self, value: Optional[pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs']]):
        pulumi.set(self, "ssh_password_credential", value)

    @property
    @pulumi.getter(name="sshkeyPathCredential")
    def sshkey_path_credential(self) -> Optional[pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs']]:
        """
        SSH credential of type keyPath
        """
        return pulumi.get(self, "sshkey_path_credential")

    @sshkey_path_credential.setter
    def sshkey_path_credential(self, value: Optional[pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs']]):
        pulumi.set(self, "sshkey_path_credential", value)

    @property
    @pulumi.getter(name="sshkeyReferenceCredential")
    def sshkey_reference_credential(self) -> Optional[pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs']]:
        """
        SSH credential of type keyReference
        """
        return pulumi.get(self, "sshkey_reference_credential")

    @sshkey_reference_credential.setter
    def sshkey_reference_credential(self, value: Optional[pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs']]):
        pulumi.set(self, "sshkey_reference_credential", value)


@pulumi.input_type
class SecretSshkeySshSshPasswordCredentialArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class SecretSshkeySshSshkeyPathCredentialArgs:
    def __init__(__self__, *,
                 key_path: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 encrypted_passphrase: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key_path", key_path)
        pulumi.set(__self__, "user_name", user_name)
        if encrypted_passphrase is not None:
            pulumi.set(__self__, "encrypted_passphrase", encrypted_passphrase)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_path")

    @key_path.setter
    def key_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_path", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="encryptedPassphrase")
    def encrypted_passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypted_passphrase")

    @encrypted_passphrase.setter
    def encrypted_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_passphrase", value)


@pulumi.input_type
class SecretSshkeySshSshkeyReferenceCredentialArgs:
    def __init__(__self__, *,
                 user_name: pulumi.Input[str],
                 encrypted_passphrase: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "user_name", user_name)
        if encrypted_passphrase is not None:
            pulumi.set(__self__, "encrypted_passphrase", encrypted_passphrase)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="encryptedPassphrase")
    def encrypted_passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypted_passphrase")

    @encrypted_passphrase.setter
    def encrypted_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_passphrase", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class UsergroupNotificationConfigArgs:
    def __init__(__self__, *,
                 group_email: Optional[pulumi.Input[str]] = None,
                 microsoft_teams_webhook_url: Optional[pulumi.Input[str]] = None,
                 pager_duty_key: Optional[pulumi.Input[str]] = None,
                 slack_webhook_url: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_email: Group email
        :param pulumi.Input[str] microsoft_teams_webhook_url: Url of Microsoft teams webhook
        :param pulumi.Input[str] pager_duty_key: Pager duty key
        :param pulumi.Input[str] slack_webhook_url: Url of slack webhook
        :param pulumi.Input[str] type: Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        if group_email is not None:
            pulumi.set(__self__, "group_email", group_email)
        if microsoft_teams_webhook_url is not None:
            pulumi.set(__self__, "microsoft_teams_webhook_url", microsoft_teams_webhook_url)
        if pager_duty_key is not None:
            pulumi.set(__self__, "pager_duty_key", pager_duty_key)
        if slack_webhook_url is not None:
            pulumi.set(__self__, "slack_webhook_url", slack_webhook_url)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupEmail")
    def group_email(self) -> Optional[pulumi.Input[str]]:
        """
        Group email
        """
        return pulumi.get(self, "group_email")

    @group_email.setter
    def group_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_email", value)

    @property
    @pulumi.getter(name="microsoftTeamsWebhookUrl")
    def microsoft_teams_webhook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Url of Microsoft teams webhook
        """
        return pulumi.get(self, "microsoft_teams_webhook_url")

    @microsoft_teams_webhook_url.setter
    def microsoft_teams_webhook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microsoft_teams_webhook_url", value)

    @property
    @pulumi.getter(name="pagerDutyKey")
    def pager_duty_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pager duty key
        """
        return pulumi.get(self, "pager_duty_key")

    @pager_duty_key.setter
    def pager_duty_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pager_duty_key", value)

    @property
    @pulumi.getter(name="slackWebhookUrl")
    def slack_webhook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Url of slack webhook
        """
        return pulumi.get(self, "slack_webhook_url")

    @slack_webhook_url.setter
    def slack_webhook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_webhook_url", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VariablesSpecArgs:
    def __init__(__self__, *,
                 fixed_value: pulumi.Input[str],
                 value_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] fixed_value: FixedValue of the variable
        :param pulumi.Input[str] value_type: Type of Value of the Variable. For now only FIXED is supported
        """
        pulumi.set(__self__, "fixed_value", fixed_value)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> pulumi.Input[str]:
        """
        FixedValue of the variable
        """
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input[str]:
        """
        Type of Value of the Variable. For now only FIXED is supported
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_type", value)


@pulumi.input_type
class GetGitopsAgentMetadataArgs:
    def __init__(__self__, *,
                 namespace: str,
                 high_availability: Optional[bool] = None):
        pulumi.set(__self__, "namespace", namespace)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: str):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[bool]:
        return pulumi.get(self, "high_availability")

    @high_availability.setter
    def high_availability(self, value: Optional[bool]):
        pulumi.set(self, "high_availability", value)


@pulumi.input_type
class GetGitopsClusterQueryArgs:
    def __init__(__self__, *,
                 ids: Optional[Sequence['GetGitopsClusterQueryIdArgs']] = None,
                 name: Optional[str] = None,
                 server: Optional[str] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence['GetGitopsClusterQueryIdArgs']]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[Sequence['GetGitopsClusterQueryIdArgs']]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[str]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class GetGitopsClusterQueryIdArgs:
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsClusterRequestArgs:
    def __init__(__self__, *,
                 clusters: Optional[Sequence['GetGitopsClusterRequestClusterArgs']] = None,
                 ids: Optional[Sequence['GetGitopsClusterRequestIdArgs']] = None,
                 update_masks: Optional[Sequence['GetGitopsClusterRequestUpdateMaskArgs']] = None,
                 updated_fields: Optional[Sequence[str]] = None,
                 upsert: Optional[bool] = None):
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if update_masks is not None:
            pulumi.set(__self__, "update_masks", update_masks)
        if updated_fields is not None:
            pulumi.set(__self__, "updated_fields", updated_fields)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['GetGitopsClusterRequestClusterArgs']]:
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[Sequence['GetGitopsClusterRequestClusterArgs']]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence['GetGitopsClusterRequestIdArgs']]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[Sequence['GetGitopsClusterRequestIdArgs']]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter(name="updateMasks")
    def update_masks(self) -> Optional[Sequence['GetGitopsClusterRequestUpdateMaskArgs']]:
        return pulumi.get(self, "update_masks")

    @update_masks.setter
    def update_masks(self, value: Optional[Sequence['GetGitopsClusterRequestUpdateMaskArgs']]):
        pulumi.set(self, "update_masks", value)

    @property
    @pulumi.getter(name="updatedFields")
    def updated_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "updated_fields")

    @updated_fields.setter
    def updated_fields(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "updated_fields", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[bool]:
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[bool]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterArgs:
    def __init__(__self__, *,
                 server: str,
                 annotations: Optional[Mapping[str, str]] = None,
                 cluster_resources: Optional[bool] = None,
                 configs: Optional[Sequence['GetGitopsClusterRequestClusterConfigArgs']] = None,
                 infos: Optional[Sequence['GetGitopsClusterRequestClusterInfoArgs']] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 namespaces: Optional[Sequence[str]] = None,
                 project: Optional[str] = None,
                 refresh_requested_ats: Optional[Sequence['GetGitopsClusterRequestClusterRefreshRequestedAtArgs']] = None,
                 shard: Optional[str] = None):
        pulumi.set(__self__, "server", server)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if cluster_resources is not None:
            pulumi.set(__self__, "cluster_resources", cluster_resources)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if refresh_requested_ats is not None:
            pulumi.set(__self__, "refresh_requested_ats", refresh_requested_ats)
        if shard is not None:
            pulumi.set(__self__, "shard", shard)

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: str):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterResources")
    def cluster_resources(self) -> Optional[bool]:
        return pulumi.get(self, "cluster_resources")

    @cluster_resources.setter
    def cluster_resources(self, value: Optional[bool]):
        pulumi.set(self, "cluster_resources", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['GetGitopsClusterRequestClusterConfigArgs']]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[Sequence['GetGitopsClusterRequestClusterConfigArgs']]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['GetGitopsClusterRequestClusterInfoArgs']]:
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[Sequence['GetGitopsClusterRequestClusterInfoArgs']]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="refreshRequestedAts")
    def refresh_requested_ats(self) -> Optional[Sequence['GetGitopsClusterRequestClusterRefreshRequestedAtArgs']]:
        return pulumi.get(self, "refresh_requested_ats")

    @refresh_requested_ats.setter
    def refresh_requested_ats(self, value: Optional[Sequence['GetGitopsClusterRequestClusterRefreshRequestedAtArgs']]):
        pulumi.set(self, "refresh_requested_ats", value)

    @property
    @pulumi.getter
    def shard(self) -> Optional[str]:
        return pulumi.get(self, "shard")

    @shard.setter
    def shard(self, value: Optional[str]):
        pulumi.set(self, "shard", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterConfigArgs:
    def __init__(__self__, *,
                 aws_auth_configs: Optional[Sequence['GetGitopsClusterRequestClusterConfigAwsAuthConfigArgs']] = None,
                 bearer_token: Optional[str] = None,
                 cluster_connection_type: Optional[str] = None,
                 exec_provider_configs: Optional[Sequence['GetGitopsClusterRequestClusterConfigExecProviderConfigArgs']] = None,
                 password: Optional[str] = None,
                 tls_client_configs: Optional[Sequence['GetGitopsClusterRequestClusterConfigTlsClientConfigArgs']] = None,
                 username: Optional[str] = None):
        if aws_auth_configs is not None:
            pulumi.set(__self__, "aws_auth_configs", aws_auth_configs)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if cluster_connection_type is not None:
            pulumi.set(__self__, "cluster_connection_type", cluster_connection_type)
        if exec_provider_configs is not None:
            pulumi.set(__self__, "exec_provider_configs", exec_provider_configs)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_client_configs is not None:
            pulumi.set(__self__, "tls_client_configs", tls_client_configs)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="awsAuthConfigs")
    def aws_auth_configs(self) -> Optional[Sequence['GetGitopsClusterRequestClusterConfigAwsAuthConfigArgs']]:
        return pulumi.get(self, "aws_auth_configs")

    @aws_auth_configs.setter
    def aws_auth_configs(self, value: Optional[Sequence['GetGitopsClusterRequestClusterConfigAwsAuthConfigArgs']]):
        pulumi.set(self, "aws_auth_configs", value)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[str]:
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[str]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="clusterConnectionType")
    def cluster_connection_type(self) -> Optional[str]:
        return pulumi.get(self, "cluster_connection_type")

    @cluster_connection_type.setter
    def cluster_connection_type(self, value: Optional[str]):
        pulumi.set(self, "cluster_connection_type", value)

    @property
    @pulumi.getter(name="execProviderConfigs")
    def exec_provider_configs(self) -> Optional[Sequence['GetGitopsClusterRequestClusterConfigExecProviderConfigArgs']]:
        return pulumi.get(self, "exec_provider_configs")

    @exec_provider_configs.setter
    def exec_provider_configs(self, value: Optional[Sequence['GetGitopsClusterRequestClusterConfigExecProviderConfigArgs']]):
        pulumi.set(self, "exec_provider_configs", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tlsClientConfigs")
    def tls_client_configs(self) -> Optional[Sequence['GetGitopsClusterRequestClusterConfigTlsClientConfigArgs']]:
        return pulumi.get(self, "tls_client_configs")

    @tls_client_configs.setter
    def tls_client_configs(self, value: Optional[Sequence['GetGitopsClusterRequestClusterConfigTlsClientConfigArgs']]):
        pulumi.set(self, "tls_client_configs", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterConfigAwsAuthConfigArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[str] = None,
                 role_arn: Optional[str] = None):
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="roleARN")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterConfigExecProviderConfigArgs:
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[str] = None,
                 env: Optional[Mapping[str, str]] = None,
                 install_hint: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if install_hint is not None:
            pulumi.set(__self__, "install_hint", install_hint)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[str]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="installHint")
    def install_hint(self) -> Optional[str]:
        return pulumi.get(self, "install_hint")

    @install_hint.setter
    def install_hint(self, value: Optional[str]):
        pulumi.set(self, "install_hint", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterConfigTlsClientConfigArgs:
    def __init__(__self__, *,
                 ca_data: Optional[str] = None,
                 cert_data: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 key_data: Optional[str] = None,
                 server_name: Optional[str] = None):
        if ca_data is not None:
            pulumi.set(__self__, "ca_data", ca_data)
        if cert_data is not None:
            pulumi.set(__self__, "cert_data", cert_data)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="caData")
    def ca_data(self) -> Optional[str]:
        return pulumi.get(self, "ca_data")

    @ca_data.setter
    def ca_data(self, value: Optional[str]):
        pulumi.set(self, "ca_data", value)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> Optional[str]:
        return pulumi.get(self, "cert_data")

    @cert_data.setter
    def cert_data(self, value: Optional[str]):
        pulumi.set(self, "cert_data", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[bool]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[str]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[str]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterInfoArgs:
    def __init__(__self__, *,
                 api_versions: Optional[Sequence[str]] = None,
                 applications_count: Optional[str] = None,
                 cache_infos: Optional[Sequence['GetGitopsClusterRequestClusterInfoCacheInfoArgs']] = None,
                 connection_states: Optional[Sequence['GetGitopsClusterRequestClusterInfoConnectionStateArgs']] = None,
                 server_version: Optional[str] = None):
        if api_versions is not None:
            pulumi.set(__self__, "api_versions", api_versions)
        if applications_count is not None:
            pulumi.set(__self__, "applications_count", applications_count)
        if cache_infos is not None:
            pulumi.set(__self__, "cache_infos", cache_infos)
        if connection_states is not None:
            pulumi.set(__self__, "connection_states", connection_states)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)

    @property
    @pulumi.getter(name="apiVersions")
    def api_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_versions")

    @api_versions.setter
    def api_versions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "api_versions", value)

    @property
    @pulumi.getter(name="applicationsCount")
    def applications_count(self) -> Optional[str]:
        return pulumi.get(self, "applications_count")

    @applications_count.setter
    def applications_count(self, value: Optional[str]):
        pulumi.set(self, "applications_count", value)

    @property
    @pulumi.getter(name="cacheInfos")
    def cache_infos(self) -> Optional[Sequence['GetGitopsClusterRequestClusterInfoCacheInfoArgs']]:
        return pulumi.get(self, "cache_infos")

    @cache_infos.setter
    def cache_infos(self, value: Optional[Sequence['GetGitopsClusterRequestClusterInfoCacheInfoArgs']]):
        pulumi.set(self, "cache_infos", value)

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> Optional[Sequence['GetGitopsClusterRequestClusterInfoConnectionStateArgs']]:
        return pulumi.get(self, "connection_states")

    @connection_states.setter
    def connection_states(self, value: Optional[Sequence['GetGitopsClusterRequestClusterInfoConnectionStateArgs']]):
        pulumi.set(self, "connection_states", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[str]:
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[str]):
        pulumi.set(self, "server_version", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterInfoCacheInfoArgs:
    def __init__(__self__, *,
                 apis_count: Optional[str] = None,
                 last_cache_sync_time: Optional[str] = None,
                 resources_count: Optional[str] = None):
        if apis_count is not None:
            pulumi.set(__self__, "apis_count", apis_count)
        if last_cache_sync_time is not None:
            pulumi.set(__self__, "last_cache_sync_time", last_cache_sync_time)
        if resources_count is not None:
            pulumi.set(__self__, "resources_count", resources_count)

    @property
    @pulumi.getter(name="apisCount")
    def apis_count(self) -> Optional[str]:
        return pulumi.get(self, "apis_count")

    @apis_count.setter
    def apis_count(self, value: Optional[str]):
        pulumi.set(self, "apis_count", value)

    @property
    @pulumi.getter(name="lastCacheSyncTime")
    def last_cache_sync_time(self) -> Optional[str]:
        return pulumi.get(self, "last_cache_sync_time")

    @last_cache_sync_time.setter
    def last_cache_sync_time(self, value: Optional[str]):
        pulumi.set(self, "last_cache_sync_time", value)

    @property
    @pulumi.getter(name="resourcesCount")
    def resources_count(self) -> Optional[str]:
        return pulumi.get(self, "resources_count")

    @resources_count.setter
    def resources_count(self, value: Optional[str]):
        pulumi.set(self, "resources_count", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterInfoConnectionStateArgs:
    def __init__(__self__, *,
                 attempted_ats: Optional[Sequence['GetGitopsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']] = None,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        if attempted_ats is not None:
            pulumi.set(__self__, "attempted_ats", attempted_ats)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="attemptedAts")
    def attempted_ats(self) -> Optional[Sequence['GetGitopsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]:
        return pulumi.get(self, "attempted_ats")

    @attempted_ats.setter
    def attempted_ats(self, value: Optional[Sequence['GetGitopsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]):
        pulumi.set(self, "attempted_ats", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterInfoConnectionStateAttemptedAtArgs:
    def __init__(__self__, *,
                 nanos: Optional[int] = None,
                 seconds: Optional[str] = None):
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[int]:
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[int]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[str]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[str]):
        pulumi.set(self, "seconds", value)


@pulumi.input_type
class GetGitopsClusterRequestClusterRefreshRequestedAtArgs:
    def __init__(__self__, *,
                 nanos: Optional[int] = None,
                 seconds: Optional[str] = None):
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[int]:
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[int]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[str]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[str]):
        pulumi.set(self, "seconds", value)


@pulumi.input_type
class GetGitopsClusterRequestIdArgs:
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsClusterRequestUpdateMaskArgs:
    def __init__(__self__, *,
                 paths: Optional[Sequence[Sequence[Any]]] = None):
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> Optional[Sequence[Sequence[Any]]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[Sequence[Sequence[Any]]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GetGitopsRepositoryRepoArgs:
    def __init__(__self__, *,
                 connection_type: str,
                 project: str,
                 repo: str,
                 type_: str,
                 enable_lfs: Optional[bool] = None,
                 enable_oci: Optional[bool] = None,
                 github_app_enterprise_base_url: Optional[str] = None,
                 github_app_id: Optional[str] = None,
                 github_app_installation_id: Optional[str] = None,
                 github_app_private_key: Optional[str] = None,
                 inherited_creds: Optional[bool] = None,
                 insecure: Optional[bool] = None,
                 insecure_ignore_host_key: Optional[bool] = None,
                 name: Optional[str] = None,
                 password: Optional[str] = None,
                 proxy: Optional[str] = None,
                 ssh_private_key: Optional[str] = None,
                 tls_client_cert_data: Optional[str] = None,
                 tls_client_cert_key: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "repo", repo)
        pulumi.set(__self__, "type_", type_)
        if enable_lfs is not None:
            pulumi.set(__self__, "enable_lfs", enable_lfs)
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if github_app_enterprise_base_url is not None:
            pulumi.set(__self__, "github_app_enterprise_base_url", github_app_enterprise_base_url)
        if github_app_id is not None:
            pulumi.set(__self__, "github_app_id", github_app_id)
        if github_app_installation_id is not None:
            pulumi.set(__self__, "github_app_installation_id", github_app_installation_id)
        if github_app_private_key is not None:
            pulumi.set(__self__, "github_app_private_key", github_app_private_key)
        if inherited_creds is not None:
            pulumi.set(__self__, "inherited_creds", inherited_creds)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if insecure_ignore_host_key is not None:
            pulumi.set(__self__, "insecure_ignore_host_key", insecure_ignore_host_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: str):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: str):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def repo(self) -> str:
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: str):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def type_(self) -> str:
        return pulumi.get(self, "type_")

    @type_.setter
    def type_(self, value: str):
        pulumi.set(self, "type_", value)

    @property
    @pulumi.getter(name="enableLfs")
    def enable_lfs(self) -> Optional[bool]:
        return pulumi.get(self, "enable_lfs")

    @enable_lfs.setter
    def enable_lfs(self, value: Optional[bool]):
        pulumi.set(self, "enable_lfs", value)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[bool]:
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[bool]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubAppEnterpriseBaseUrl")
    def github_app_enterprise_base_url(self) -> Optional[str]:
        return pulumi.get(self, "github_app_enterprise_base_url")

    @github_app_enterprise_base_url.setter
    def github_app_enterprise_base_url(self, value: Optional[str]):
        pulumi.set(self, "github_app_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubAppId")
    def github_app_id(self) -> Optional[str]:
        return pulumi.get(self, "github_app_id")

    @github_app_id.setter
    def github_app_id(self, value: Optional[str]):
        pulumi.set(self, "github_app_id", value)

    @property
    @pulumi.getter(name="githubAppInstallationId")
    def github_app_installation_id(self) -> Optional[str]:
        return pulumi.get(self, "github_app_installation_id")

    @github_app_installation_id.setter
    def github_app_installation_id(self, value: Optional[str]):
        pulumi.set(self, "github_app_installation_id", value)

    @property
    @pulumi.getter(name="githubAppPrivateKey")
    def github_app_private_key(self) -> Optional[str]:
        return pulumi.get(self, "github_app_private_key")

    @github_app_private_key.setter
    def github_app_private_key(self, value: Optional[str]):
        pulumi.set(self, "github_app_private_key", value)

    @property
    @pulumi.getter(name="inheritedCreds")
    def inherited_creds(self) -> Optional[bool]:
        return pulumi.get(self, "inherited_creds")

    @inherited_creds.setter
    def inherited_creds(self, value: Optional[bool]):
        pulumi.set(self, "inherited_creds", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[bool]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="insecureIgnoreHostKey")
    def insecure_ignore_host_key(self) -> Optional[bool]:
        return pulumi.get(self, "insecure_ignore_host_key")

    @insecure_ignore_host_key.setter
    def insecure_ignore_host_key(self, value: Optional[bool]):
        pulumi.set(self, "insecure_ignore_host_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[str]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[str]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[str]:
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[str]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[str]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[str]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetGitopsRepositoryUpdateMaskArgs:
    def __init__(__self__, *,
                 paths: Optional[Sequence[str]] = None):
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GetRoleAssignmentsPrincipalArgs:
    def __init__(__self__, *,
                 identifier: str,
                 scope_level: str,
                 type: str):
        """
        :param str identifier: Identifier.
        :param str scope_level: Scope level.
        :param str type: Type.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "scope_level", scope_level)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Identifier.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: str):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="scopeLevel")
    def scope_level(self) -> str:
        """
        Scope level.
        """
        return pulumi.get(self, "scope_level")

    @scope_level.setter
    def scope_level(self, value: str):
        pulumi.set(self, "scope_level", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetUsergroupNotificationConfigArgs:
    def __init__(__self__, *,
                 group_email: str,
                 microsoft_teams_webhook_url: str,
                 pager_duty_key: str,
                 slack_webhook_url: str,
                 type: str):
        """
        :param str group_email: Group email
        :param str microsoft_teams_webhook_url: Url of Microsoft teams webhook
        :param str pager_duty_key: Pager duty key
        :param str slack_webhook_url: Url of slack webhook
        :param str type: Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        pulumi.set(__self__, "group_email", group_email)
        pulumi.set(__self__, "microsoft_teams_webhook_url", microsoft_teams_webhook_url)
        pulumi.set(__self__, "pager_duty_key", pager_duty_key)
        pulumi.set(__self__, "slack_webhook_url", slack_webhook_url)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupEmail")
    def group_email(self) -> str:
        """
        Group email
        """
        return pulumi.get(self, "group_email")

    @group_email.setter
    def group_email(self, value: str):
        pulumi.set(self, "group_email", value)

    @property
    @pulumi.getter(name="microsoftTeamsWebhookUrl")
    def microsoft_teams_webhook_url(self) -> str:
        """
        Url of Microsoft teams webhook
        """
        return pulumi.get(self, "microsoft_teams_webhook_url")

    @microsoft_teams_webhook_url.setter
    def microsoft_teams_webhook_url(self, value: str):
        pulumi.set(self, "microsoft_teams_webhook_url", value)

    @property
    @pulumi.getter(name="pagerDutyKey")
    def pager_duty_key(self) -> str:
        """
        Pager duty key
        """
        return pulumi.get(self, "pager_duty_key")

    @pager_duty_key.setter
    def pager_duty_key(self, value: str):
        pulumi.set(self, "pager_duty_key", value)

    @property
    @pulumi.getter(name="slackWebhookUrl")
    def slack_webhook_url(self) -> str:
        """
        Url of slack webhook
        """
        return pulumi.get(self, "slack_webhook_url")

    @slack_webhook_url.setter
    def slack_webhook_url(self, value: str):
        pulumi.set(self, "slack_webhook_url", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)


