# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGitopsClusterResult',
    'AwaitableGetGitopsClusterResult',
    'get_gitops_cluster',
    'get_gitops_cluster_output',
]

@pulumi.output_type
class GetGitopsClusterResult:
    """
    A collection of values returned by getGitopsCluster.
    """
    def __init__(__self__, account_id=None, agent_id=None, id=None, identifier=None, org_id=None, project_id=None, queries=None, requests=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if agent_id and not isinstance(agent_id, str):
            raise TypeError("Expected argument 'agent_id' to be a str")
        pulumi.set(__self__, "agent_id", agent_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if queries and not isinstance(queries, list):
            raise TypeError("Expected argument 'queries' to be a list")
        pulumi.set(__self__, "queries", queries)
        if requests and not isinstance(requests, list):
            raise TypeError("Expected argument 'requests' to be a list")
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.GetGitopsClusterQueryResult']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.GetGitopsClusterRequestResult']]:
        return pulumi.get(self, "requests")


class AwaitableGetGitopsClusterResult(GetGitopsClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGitopsClusterResult(
            account_id=self.account_id,
            agent_id=self.agent_id,
            id=self.id,
            identifier=self.identifier,
            org_id=self.org_id,
            project_id=self.project_id,
            queries=self.queries,
            requests=self.requests)


def get_gitops_cluster(account_id: Optional[str] = None,
                       agent_id: Optional[str] = None,
                       identifier: Optional[str] = None,
                       org_id: Optional[str] = None,
                       project_id: Optional[str] = None,
                       queries: Optional[Sequence[pulumi.InputType['GetGitopsClusterQueryArgs']]] = None,
                       requests: Optional[Sequence[pulumi.InputType['GetGitopsClusterRequestArgs']]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGitopsClusterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['agentId'] = agent_id
    __args__['identifier'] = identifier
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['queries'] = queries
    __args__['requests'] = requests
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harness:platform/getGitopsCluster:getGitopsCluster', __args__, opts=opts, typ=GetGitopsClusterResult).value

    return AwaitableGetGitopsClusterResult(
        account_id=__ret__.account_id,
        agent_id=__ret__.agent_id,
        id=__ret__.id,
        identifier=__ret__.identifier,
        org_id=__ret__.org_id,
        project_id=__ret__.project_id,
        queries=__ret__.queries,
        requests=__ret__.requests)


@_utilities.lift_output_func(get_gitops_cluster)
def get_gitops_cluster_output(account_id: Optional[pulumi.Input[str]] = None,
                              agent_id: Optional[pulumi.Input[Optional[str]]] = None,
                              identifier: Optional[pulumi.Input[str]] = None,
                              org_id: Optional[pulumi.Input[Optional[str]]] = None,
                              project_id: Optional[pulumi.Input[str]] = None,
                              queries: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGitopsClusterQueryArgs']]]]] = None,
                              requests: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGitopsClusterRequestArgs']]]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGitopsClusterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
