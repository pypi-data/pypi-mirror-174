
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _iree_structured_transform_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


from ._transform_ops_gen import _Dialect

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferizeOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.bufferize"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CanonicalizedSequenceOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.structured.canonicalized_sequence"

  _ODS_REGIONS = (1, True)

  def __init__(self, results_, failure_propagation_mode, *, root=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if root is not None: operands.append(_get_op_result_or_value(root))
    attributes["failure_propagation_mode"] = failure_propagation_mode
    results.extend(results_)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def root(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LowerToLLVMOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.lower_to_llvm"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, reassociate_fp_reductions=None, enable_index_optimizations=None, enable_arm_neon=None, enable_arm_sve=None, enable_amx=None, enable_x86vector=None, enable_async=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if reassociate_fp_reductions is not None: attributes["reassociate_fp_reductions"] = reassociate_fp_reductions
    if enable_index_optimizations is not None: attributes["enable_index_optimizations"] = enable_index_optimizations
    if enable_arm_neon is not None: attributes["enable_arm_neon"] = enable_arm_neon
    if enable_arm_sve is not None: attributes["enable_arm_sve"] = enable_arm_sve
    if enable_amx is not None: attributes["enable_amx"] = enable_amx
    if enable_x86vector is not None: attributes["enable_x86vector"] = enable_x86vector
    if enable_async is not None: attributes["enable_async"] = enable_async
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def reassociate_fp_reductions(self):
    return _ods_ir.BoolAttr(self.operation.attributes["reassociate_fp_reductions"])

  @reassociate_fp_reductions.setter
  def reassociate_fp_reductions(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["reassociate_fp_reductions"] = value

  @builtins.property
  def enable_index_optimizations(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_index_optimizations"])

  @enable_index_optimizations.setter
  def enable_index_optimizations(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_index_optimizations"] = value

  @builtins.property
  def enable_arm_neon(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_arm_neon"])

  @enable_arm_neon.setter
  def enable_arm_neon(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_arm_neon"] = value

  @builtins.property
  def enable_arm_sve(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_arm_sve"])

  @enable_arm_sve.setter
  def enable_arm_sve(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_arm_sve"] = value

  @builtins.property
  def enable_amx(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_amx"])

  @enable_amx.setter
  def enable_amx(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_amx"] = value

  @builtins.property
  def enable_x86vector(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_x86vector"])

  @enable_x86vector.setter
  def enable_x86vector(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_x86vector"] = value

  @builtins.property
  def enable_async(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_async"])

  @enable_async.setter
  def enable_async(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_async"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LowerVectorsOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.lower_vectors"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, stages=None, contraction_lowering=None, multireduction_lowering=None, split_transfers=None, unroll_vector_transfers=None, transpose_lowering=None, transpose_avx2_lowering=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if stages is not None: attributes["stages"] = stages
    if contraction_lowering is not None: attributes["contraction_lowering"] = contraction_lowering
    if multireduction_lowering is not None: attributes["multireduction_lowering"] = multireduction_lowering
    if split_transfers is not None: attributes["split_transfers"] = split_transfers
    if unroll_vector_transfers is not None: attributes["unroll_vector_transfers"] = unroll_vector_transfers
    if transpose_lowering is not None: attributes["transpose_lowering"] = transpose_lowering
    if transpose_avx2_lowering is not None: attributes["transpose_avx2_lowering"] = transpose_avx2_lowering
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def contraction_lowering(self):
    return _ods_ir.StringAttr(self.operation.attributes["contraction_lowering"])

  @contraction_lowering.setter
  def contraction_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["contraction_lowering"] = value

  @builtins.property
  def multireduction_lowering(self):
    return _ods_ir.StringAttr(self.operation.attributes["multireduction_lowering"])

  @multireduction_lowering.setter
  def multireduction_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["multireduction_lowering"] = value

  @builtins.property
  def split_transfers(self):
    return _ods_ir.StringAttr(self.operation.attributes["split_transfers"])

  @split_transfers.setter
  def split_transfers(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["split_transfers"] = value

  @builtins.property
  def unroll_vector_transfers(self):
    return _ods_ir.BoolAttr(self.operation.attributes["unroll_vector_transfers"])

  @unroll_vector_transfers.setter
  def unroll_vector_transfers(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["unroll_vector_transfers"] = value

  @builtins.property
  def transpose_lowering(self):
    return _ods_ir.StringAttr(self.operation.attributes["transpose_lowering"])

  @transpose_lowering.setter
  def transpose_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["transpose_lowering"] = value

  @builtins.property
  def transpose_avx2_lowering(self):
    return _ods_ir.BoolAttr(self.operation.attributes["transpose_avx2_lowering"])

  @transpose_avx2_lowering.setter
  def transpose_avx2_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["transpose_avx2_lowering"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrintOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.print"

  _ODS_REGIONS = (0, True)

  def __init__(self, name, *, target=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if target is not None: operands.append(_get_op_result_or_value(target))
    attributes["name"] = name
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def name(self):
    return _ods_ir.StringAttr(self.operation.attributes["name"])

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value
