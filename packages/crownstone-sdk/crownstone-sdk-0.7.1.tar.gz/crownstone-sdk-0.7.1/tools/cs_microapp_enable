#!/usr/bin/env python3

""" Experimental tool to upload a microapp to a Crownstone. """

import asyncio
import logging
from os import path
import datetime

from crownstone_ble import CrownstoneBle, BleEventBus, BleTopics
from tools.util.config import getToolConfig, loadKeysFromConfig, setupDefaultCommandLineArguments, macFilterPassed

tool_version = "1.0.0"

parser = setupDefaultCommandLineArguments('Enable a microapp on a Crownstone.')
parser.add_argument('-a', '--bleAddress', required=True, help='The MAC address/handle of the Crownstone you want to connect to')
parser.add_argument('-v', '--verbose', default=False,
                    help='Verbose will show the full advertisement content, not just a single line summary.')

# logging.basicConfig(format='%(asctime)s %(levelname)-7s: %(message)s', level=logging.DEBUG)

try:
    file_path = path.dirname(path.realpath(__file__))
    [tool_config, args] = getToolConfig(file_path, parser)
except Exception as e:
    print("ERROR", e)
    quit()

# create the library instance
print(f'Initializing tool with bleAdapterAddress={tool_config["bleAdapterAddress"]}')
core = CrownstoneBle(bleAdapterAddress=tool_config["bleAdapterAddress"])

# load the encryption keys into the library
try:
    loadKeysFromConfig(core, tool_config)
except Exception as e:
    print("ERROR", e)
    quit()


# The index where we want to put our microapp.
appIndex = 0

# Version of microapp upload protocol
protocol = 1

async def main():
    print("Main")

    await core.connect(args.bleAddress)
    info = await core._dev.getMicroappInfo()
    print(info)

    # Perform some checks with the info we received.
    if appIndex >= info.maxApps:
        print(f"This crownstone doesn't have room for index {appIndex}")
        await core.disconnect()
        await core.shutDown()
        return

    print("Enable..")
    await core._dev.enableMicroapp(appIndex, protocol)
    print("Enable done")

    await core.disconnect()
    await core.shutDown()

try:
    # asyncio.run does not work here.
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
except KeyboardInterrupt:
    print("Stopping.")
