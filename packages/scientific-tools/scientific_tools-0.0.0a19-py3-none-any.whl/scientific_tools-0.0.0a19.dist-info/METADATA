Metadata-Version: 2.1
Name: scientific-tools
Version: 0.0.0a19
Summary: Scientific tools is the Swiss knife for scientists and students who work with python.
Author-email: Cyprien BONTRON <c.b.e.python@gmail.com>
Maintainer-email: Cyprien BONTRON <c.b.e.python@gmail.com>
License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License        
        Futher information at: https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode
Project-URL: Download-URL, https://pypi.org/project/scientific_tools/
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Natural Language :: English
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Education
Classifier: License :: Free for non-commercial use
Classifier: Development Status :: 2 - Pre-Alpha
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: matplotlib

# Scientific tools

[![Version](https://img.shields.io/pypi/v/scientific-tools.svg)](https://pypi.org/project/scientific-tools/) [![PyVersion](https://img.shields.io/pypi/pyversions/scientific-tools.svg)](https://pypi.org/project/scientific-tools/)

# Project's description
scientific_tools is the Swiss knife for scientists and students who work with python.
This framework is currently in development, but some functionnalities work without any bugs.

# Mathematics

## Solve
The `scientific_tools.mathematics.solve` file can resolve equations with some functions using different algorithm :
- `dichotomy` function search the unique solution of f(x) = 0, where f is an continuous and strictly monotone function.
Some functions are in development.

# Physics

## Uncertainty
The `scientific_tools.physics.uncertainty` file can calculate uncertainties :
- calculate standard uncertainties with propagation rules
- calculate relative uncertainties with propagation rules
- calculate z-scores (z-core between a value and a reference value & z-score between two value)

## Other files are planned
A lot of other functionnalities are in development.

# Graphics package

## Functions graphs
The `scientific_tools.graphics.function_graphs` file can trace 2D and 3D functions graphs.
It will be able to trace two functions curves in few weeks (in development). 

## Uncertainty graphs
The `scientific_tools.graphics.uncertainty_graphs` file can draw :
- an uncertainty graph with a function, the function plus its uncertainty and the fonction minus its uncertainty.
- experimental values with uncertainties bar.
- a z-score graph : draws the points (or a function) that correspond to z-score and draws the maximum and minimum lines of z-core validity.


## Thanks
This framework rely on few others frameworks that are free.
The code is written in Python 3.10 and use :
- numpy
- matplotlib 

## License
**Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (CC-BY-NC-SA)**

(Futher information at: https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode )

Â©Cyprien BONTRON (c.b.e.python@gmail.com)

