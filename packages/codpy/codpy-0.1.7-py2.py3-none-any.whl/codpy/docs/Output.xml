<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1512, Ny:1512, D:3
Kernel::Dnm Nx:1512, Ny:1512, D:3
0.04033
</elapsed_time>
Dnm::out Nx:1512, Ny:1512
0.05062
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:1512, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.32105
</elapsed_time>
0.34493
</elapsed_time>
0.34556
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.31621
</elapsed_time>
0.32620
</elapsed_time>
0.32691
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(materntensor)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.35773
</elapsed_time>
0.36867
</elapsed_time>
0.36945
</elapsed_time>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1512, Ny:1512, D:3
Kernel::Dnm Nx:1512, Ny:1512, D:3
0.04524
</elapsed_time>
Dnm::out Nx:1512, Ny:1512
0.05648
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:1512, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.32888
</elapsed_time>
0.36017
</elapsed_time>
0.36075
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.29734
</elapsed_time>
0.30751
</elapsed_time>
0.30829
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(materntensor)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.30238
</elapsed_time>
0.31272
</elapsed_time>
0.31320
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1000, Ny:1000, D:1
Kernel::Dnm Nx:1000, Ny:1000, D:1
0.01989
</elapsed_time>
Dnm::out Nx:1000, Ny:1000
0.02516
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:1000, Nz:1000, Dfx:1, D:1  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00868
</elapsed_time>
0.09050
</elapsed_time>
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00912
</elapsed_time>
0.09978
</elapsed_time>
0.09999
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1000, Ny:1000, D:1
Kernel::Dnm Nx:1000, Ny:1000, D:1
0.02210
</elapsed_time>
Dnm::out Nx:1000, Ny:1000
0.02912
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:1000, Nz:1000, Dfx:1, D:1  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00894
</elapsed_time>
0.09583
</elapsed_time>
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00677
</elapsed_time>
0.10278
</elapsed_time>
0.10297
</elapsed_time>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1000, Ny:1000, D:1
Kernel::Dnm Nx:1000, Ny:1000, D:1
0.02125
</elapsed_time>
Dnm::out Nx:1000, Ny:1000
0.02745
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:1000, Nz:1000, Dfx:1, D:1  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00985
</elapsed_time>
0.11108
</elapsed_time>
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00667
</elapsed_time>
0.11791
</elapsed_time>
0.11817
</elapsed_time>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1000, Ny:1000, D:1
Kernel::Dnm Nx:1000, Ny:1000, D:1
0.02059
</elapsed_time>
Dnm::out Nx:1000, Ny:1000
0.02566
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:1000, Nz:1000, Dfx:1, D:1  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00895
</elapsed_time>
0.10617
</elapsed_time>
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00740
</elapsed_time>
0.11376
</elapsed_time>
0.11396
</elapsed_time>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(maternnorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:500, Ny:500, D:784

<info>user distance:norm1</info>
0.03930
</elapsed_time>
Dnm::out Nx:500, Ny:500
0.05448
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(maternnorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:59500, Ny:500, D:784

<info>user distance:norm1</info>
4.46829
</elapsed_time>
Dnm::out Nx:59500, Ny:500
5.40411
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(maternnorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:60000, Ny:500, Nz:100, Dfx:784, D:784  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
8.87136
</elapsed_time>
8.92361
</elapsed_time>
10.54711
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "alg.match(pi_array_type& x, size_t N)"/>
<elapsed_time value = "rearrangement_functional::rearrangement_functional()(std::vector<size_t>& permutation)">

<info cost =" W_ ">0.0175701 </info>

<info cost ="0.00588703" count = "6"/>
0.02378
</elapsed_time>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:32, Nz:10000, Dfx:10, D:784  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.06472
</elapsed_time>
0.64984
</elapsed_time>
0.83300
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "alg.match(pi_array_type& x, size_t N)"/>
<elapsed_time value = "rearrangement_functional::rearrangement_functional()(std::vector<size_t>& permutation)">

<info cost =" W_ ">0.00956421 </info>

<info cost ="0.00242335" count = "7"/>
0.10377
</elapsed_time>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:64, Nz:10000, Dfx:10, D:784  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.06502
</elapsed_time>
0.70015
</elapsed_time>
0.87709
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "alg.match(pi_array_type& x, size_t N)"/>
<elapsed_time value = "rearrangement_functional::rearrangement_functional()(std::vector<size_t>& permutation)">

<info cost =" W_ ">0.00599054 </info>

<info cost ="0.000945716" count = "7"/>
0.41333
</elapsed_time>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:128, Nz:10000, Dfx:10, D:784  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.08041
</elapsed_time>
0.79139
</elapsed_time>
0.95631
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "alg.match(pi_array_type& x, size_t N)"/>
<elapsed_time value = "rearrangement_functional::rearrangement_functional()(std::vector<size_t>& permutation)">

<info cost =" W_ ">0.00356245 </info>

<info cost ="0.000326404" count = "13"/>
2.98897
</elapsed_time>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1000, Ny:256, Nz:10000, Dfx:10, D:784  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.11329
</elapsed_time>
1.04072
</elapsed_time>
1.20735
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1512, Ny:1512, D:3
Kernel::Dnm Nx:1512, Ny:1512, D:3
0.04565
</elapsed_time>
Dnm::out Nx:1512, Ny:1512
0.05775
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:1512, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.02238
</elapsed_time>
0.28507
</elapsed_time>
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.02257
</elapsed_time>
0.30789
</elapsed_time>
0.30845
</elapsed_time>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1512, Ny:1512, D:3
Kernel::Dnm Nx:1512, Ny:1512, D:3
0.04089
</elapsed_time>
Dnm::out Nx:1512, Ny:1512
0.05170
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:1512, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.33903
</elapsed_time>
0.36593
</elapsed_time>
0.36656
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:15120, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.33493
</elapsed_time>
0.63840
</elapsed_time>
0.64116
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(materntensor)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:15120, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.31693
</elapsed_time>
0.59123
</elapsed_time>
0.59283
</elapsed_time>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1512, Ny:1512, D:3
Kernel::Dnm Nx:1512, Ny:1512, D:3
0.04729
</elapsed_time>
Dnm::out Nx:1512, Ny:1512
0.06111
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:1512, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.37755
</elapsed_time>
0.40757
</elapsed_time>
0.40820
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.51469
</elapsed_time>
0.52430
</elapsed_time>
0.52508
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(materntensor)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.32422
</elapsed_time>
0.33441
</elapsed_time>
0.33519
</elapsed_time>
<info value = "alg.grid_projection(pi_array_type& x)"/>
</info>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1512, Ny:1512, D:3
Kernel::Dnm Nx:1512, Ny:1512, D:3
0.06247
</elapsed_time>
Dnm::out Nx:1512, Ny:1512
0.07839
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:1512, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.32510
</elapsed_time>
0.35305
</elapsed_time>
0.35358
</elapsed_time>
<info value = "kernel.set_polynomial_order(2)"/>
<info value = "set_kernel(linear_regressor)"/>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "linear_regressor::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.33595
</elapsed_time>
0.34638
</elapsed_time>
0.34707
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(materntensor)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1512, Ny:1512, Nz:500, Dfx:3, D:3  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
0.33129
</elapsed_time>
0.34360
</elapsed_time>
0.34407
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:10000, Ny:1512, D:2
Kernel::Dnm Nx:10000, Ny:1512, D:2
0.30571
</elapsed_time>
Dnm::out Nx:10000, Ny:1512
0.39377
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:10000, Ny:1500, D:2
Kernel::Dnm Nx:10000, Ny:1500, D:2
0.32194
</elapsed_time>
Dnm::out Nx:10000, Ny:1500
0.43016
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1, Ny:500, D:4
Kernel::Dnm Nx:1, Ny:500, D:4
0.00014
</elapsed_time>
Dnm::out Nx:1, Ny:500
0.00026
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<elapsed_time value = "op.projection(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
<elapsed_time value = "Kernel::projection(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
Kernel::projection Nx:1500, Ny:1500, Nz:500, Dfx:1, D:4  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.02164
</elapsed_time>
0.34968
</elapsed_time>
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.00944
</elapsed_time>
0.35932
</elapsed_time>
0.35978
</elapsed_time>
<info value = "kernel.set_polynomial_order(0)"/>
<info value = "set_kernel(tensornorm)"/>
<info value = "kernel.op.set_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel.set_regularization(0.000000)"/>
<info value = "kernel.rescale(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "op.nabla(pi_array_type& x, pi_array_type& y, pi_array_type& z, pi_array_type& fx, pi_array_type& reg = pi_array_type())">
Kernel::nabla Nx:1500, Ny:1500, Nz:500, Dfx:1, D:4  nRow(reg):0  nCol(reg):0
<elapsed_time value = "Kernel::Knm_inv(const Matrix_type& x, const Matrix_type& y, const Matrix_type& z, const Matrix_type& fx_, const Matrix_type& reg = Matrix_type())">
<elapsed_time value = "Kernel::Knm(const Matrix_type& x, const Matrix_type& y, const Matrix_type& fy)">
0.02466
</elapsed_time>
0.31486
</elapsed_time>
</info>
