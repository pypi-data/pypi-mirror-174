import pandas as pd
from solas_disparity.types import SMDDenominator as SMDDenominator, StatSigHypothesis as StatSigHypothesis, StatSigRegressionType as StatSigRegressionType
from typing import Callable, Dict, List, Optional, Union

def validate_group_list_lengths(protected_groups: List[str], reference_groups: List[str], group_categories: List[str]) -> None: ...
def validate_group_list_lengths_at_least_one(protected_groups: List[str], reference_groups: List[str], group_categories: List[str]) -> None: ...
def validate_protected_groups_unique(protected_groups: List[str]): ...
def validate_reference_group_category_association(reference_groups: List[str], group_categories: List[str]): ...
def validate_data_lengths_equal(group_data: pd.DataFrame, outcome: pd.Series, sample_weight: pd.Series, label: pd.Series = ...) -> None: ...
def validate_data_lengths_at_least_one(group_data: pd.DataFrame, outcome: pd.Series, sample_weight: pd.Series, label: pd.Series = ...) -> None: ...
def validate_indices_correspondence(group_data: pd.DataFrame, outcome: pd.Series, sample_weight: pd.Series, label: pd.Series = ...) -> None: ...
def validate_unique_indices(group_data: pd.DataFrame, outcome: pd.Series, sample_weight: pd.Series, label: pd.Series = ...) -> None: ...
def validate_groups_in_group_data(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str]) -> None: ...
def validate_missing_data_in_group_category(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str]) -> None: ...
def validate_group_data_non_negative(group_data: pd.DataFrame) -> None: ...
def validate_no_missing_values_in_outcome_label_sample_weight(outcome: pd.Series, sample_weight: pd.Series, label: pd.Series = ...) -> None: ...
def validate_sample_weight_non_negative(sample_weight: pd.Series) -> None: ...
def validate_group_data_dtypes(group_data: pd.DataFrame) -> None: ...
def validate_common_disparity(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, sample_weight: pd.Series, label: pd.Series = ...) -> None: ...
def validate_air_threshold_non_negative(air_threshold: float) -> None: ...
def validate_odds_ratio_threshold_non_negative(odds_ratio_threshold: float) -> None: ...
def validate_percent_difference_threshold_non_negative(percent_difference_threshold: float) -> None: ...
def validate_air_outcome_and_label_boolean(outcome: pd.Series, label: pd.Series = ...) -> None: ...
def validate_alternative_hypothesis_set_with_max_for_fishers(alternative_hypothesis: StatSigHypothesis, max_for_fishers: int = ...) -> None: ...
def validate_or_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, label: Union[None, pd.Series], sample_weight: pd.Series, odds_ratio_threshold: float, percent_difference_threshold: float, max_for_fishers: int, alternative_hypothesis: StatSigHypothesis, lower_score_favorable: bool) -> None: ...
def validate_air_by_q_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, quantiles: List[Union[float, int]], label: Optional[Union[None, pd.Series]], sample_weight: pd.Series, air_threshold: float, percent_difference_threshold: float, max_for_fishers: int, alternative_hypothesis: StatSigHypothesis, lower_score_favorable: bool, merge_bins: bool) -> None: ...
def validate_categorical_air_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, ordinal_categories: Optional[List[Union[int, str]]], label: Union[None, pd.Series], sample_weight: pd.Series, air_threshold: float, percent_difference_threshold: float, max_for_fishers: int, alternative_hypothesis: StatSigHypothesis) -> None: ...
def validate_quantiles_at_least_one(quantiles: List[Union[float, int]]) -> None: ...
def validate_quantiles_range(quantiles: List[Union[float, int]]) -> None: ...
def validate_quantiles_unique(quantiles: List[Union[float, int]]) -> None: ...
def validate_outcome_ordinal_order_unique(ordinal_categories: List) -> None: ...
def validate_segmented_air_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, segment: pd.Series, fdr_threshold: float, label: Union[None, pd.Series], sample_weight: pd.Series, air_threshold: float, percent_difference_threshold: float, max_for_fishers: int, alternative_hypothesis: StatSigHypothesis, shift_zeros: bool, overwrite_segment_results: bool) -> None: ...
def validate_fdr_threshold_range(fdr_threshold: Union[float, int]) -> None: ...
def validate_segment_not_nan(segment: pd.Series) -> None: ...
def validate_fishers_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, sample_weight: pd.Series, alternative_hypothesis: StatSigHypothesis) -> None: ...
def validate_chi_squared_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, sample_weight: pd.Series) -> None: ...
def validate_two_sample_t_test_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, sample_weight: pd.Series) -> None: ...
def validate_weighted_regression_input_types(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str], outcome: pd.Series, sample_weight: pd.Series, regression_type: StatSigRegressionType) -> None: ...
def validate_regression_type(regression_type: StatSigRegressionType, outcome: pd.Series) -> None: ...
def validate_metric_requested(metric_requested: Callable, metric_requested_name: Optional[str], metric_requested_kwargs: Optional[Dict]): ...
