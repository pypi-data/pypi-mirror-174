import numpy as np
import pandas as pd
from solas_disparity import const as const
from solas_disparity.types import ResidualSMDDenominator as ResidualSMDDenominator, SMDDenominator as SMDDenominator, StatSigHypothesis as StatSigHypothesis, StatSigRegressionType as StatSigRegressionType
from solas_disparity.utils import pgrg_ordered as pgrg_ordered
from typing import List, Optional, Tuple, Union

def normalize_to_series(val: Union[pd.Series, np.ndarray, pd.DataFrame], default_name: Optional[str] = ...) -> pd.Series: ...
def condition_group_data(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str]) -> pd.DataFrame: ...
def condition_outcome_to_series(outcome: Union[pd.Series, np.ndarray, pd.DataFrame]) -> pd.Series: ...
def condition_label_to_series(label: Optional[Union[pd.Series, pd.DataFrame, np.ndarray]]) -> Optional[pd.Series]: ...
def condition_sample_weight_to_series(sample_weight: Optional[Union[pd.Series, pd.DataFrame, np.ndarray]], group_data: pd.DataFrame) -> pd.Series: ...
def condition_alternative_hypothesis(alternative_hypothesis: Union[str, StatSigHypothesis]) -> StatSigHypothesis: ...
def condition_quantiles_to_list(quantiles: Union[pd.Series, pd.DataFrame, np.ndarray, List[float]]) -> list: ...
def condition_ordinal_order_to_list(ordinal_categories: Union[pd.Series, pd.DataFrame, np.ndarray, List]) -> list: ...
def condition_segment_to_series(segment: Union[pd.Series, np.ndarray, pd.DataFrame]) -> pd.Series: ...
def condition_smd_denominator(smd_denominator: Union[str, SMDDenominator]) -> SMDDenominator: ...
def condition_r_smd_denominator(residual_smd_denominator: Union[str, ResidualSMDDenominator]) -> ResidualSMDDenominator: ...
def condition_regression_type(regression_type: Union[str, StatSigRegressionType]) -> StatSigRegressionType: ...
def condition_groups_for_weighted_regression_post_validation(group_data: pd.DataFrame, protected_groups: List[str], reference_groups: List[str], group_categories: List[str]) -> Tuple[List[str], List[str], List[str]]: ...
