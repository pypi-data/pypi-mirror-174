## Copyright (c) 2021 Intel Corporation
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
#
-
  version:
    name: '1.7.0'
  
  precisions: &common_precisions
    names: int8, uint8, fp32
    valid_mixed_precisions: []
  
  ops: &common_ops
    int8: ['Conv', 'MatMul', 'Attention', 'Relu', 'Clip',
           'LeakyRelu', 'Gather', 'Sigmoid', 'MaxPool', 'EmbedLayerNormalization',
           'FusedConv', 'GlobalAveragePool', 'Pad', 'Split', 'Add']
    fp32: ['*'] # '*' means all op types
  
  capabilities: &common_capabilities
    int8: &ref_1_7 {
          'Conv': &key_1_7_0 {
            'weight':   {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel', 'per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          'Gather': {
            'weight':   {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_channel', 'per_tensor'],
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor'],
                        }
                    },
         'default': {
             'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor']
                    },
             'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor']
                        }
                    },
          }

  graph_optimization: &default_optimization  # from onnxruntime graph_optimization_level
      level: 'ENABLE_EXTENDED'         # choices are ['DISABLE_ALL', 'ENABLE_BASIC', 'ENABLE_EXTENDED', 'ENABLE_ALL']

-
  version:
    name: ['1.8.0', '1.9.0']

  precisions: 
    <<: *common_precisions

  ops:
    int8: ['Conv', 'MatMul', 'Attention', 'Relu', 'Clip',
           'LeakyRelu', 'Gather', 'Sigmoid', 'MaxPool', 'EmbedLayerNormalization',
           'FusedConv', 'GlobalAveragePool', 'Pad', 'Split', 'Squeeze',
           'Reshape', 'Concat', 'AveragePool', 'Unsqueeze', 'Transpose', 'Resize']
    fp32: ['*'] # '*' means all op types

  capabilities:
    <<: *common_capabilities

  graph_optimization: 
    <<: *default_optimization

-
  version:
    name: '1.10.0'

  precisions: 
    <<: *common_precisions

  ops:
    int8: ['Conv', 'MatMul', 'Attention', 'Relu', 'Clip',
        'LeakyRelu', 'Gather', 'Sigmoid', 'MaxPool', 'EmbedLayerNormalization',
        'FusedConv', 'GlobalAveragePool', 'Pad', 'Split', 'Squeeze',
        'Reshape', 'Concat', 'AveragePool', 'Unsqueeze', 'Transpose', 'Resize']
    fp32: ['*'] # '*' means all op types

  capabilities:
    int8: {
          'Conv': {
            'weight':   {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel', 'per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          'Gather': {
            'weight':   {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_channel', 'per_tensor'],
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor'],
                        }
                    },
          'MatMul': {
            'weight':   {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel', 'per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
         'default': {
             'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor']
                    },
             'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor']
                        }
                    },
          }


  graph_optimization: 
    <<: *default_optimization

-

  version:
    name: ['1.11.0', '1.12.0']

  precisions: 
    <<: *common_precisions

  ops:
    int8: ['Conv', 'MatMul', 'Attention', 'Relu', 'Clip',
        'LeakyRelu', 'Gather', 'Sigmoid', 'MaxPool', 'EmbedLayerNormalization',
        'FusedConv', 'GlobalAveragePool', 'Pad', 'Split', 'Squeeze', 'Reshape',
        'Concat', 'AveragePool', 'Unsqueeze', 'Transpose', 'Gemm', 'Resize']
    fp32: ['*'] # '*' means all op types

  capabilities:
    int8: {
          'Conv': {
            'weight':   {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel', 'per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          'Gather': {
            'weight':   {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_channel', 'per_tensor'],
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor'],
                        }
                    },
          'MatMul': {
            'weight':   {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel', 'per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
          'Gemm': {
            'weight':   {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'granularity': ['per_channel', 'per_tensor'],
                        'algorithm': ['minmax']
                        },
            'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'granularity': ['per_tensor'],
                        'algorithm': ['minmax']
                        }
                    },
         'default': {
             'weight': {
                        'dtype': ['int8'],
                        'scheme': ['sym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor']
                    },
             'activation': {
                        'dtype': ['uint8'],
                        'scheme': ['asym'],
                        'algorithm': ['minmax'],
                        'granularity': ['per_tensor']
                        }
                    },
          }


  graph_optimization: 
    <<: *default_optimization

-

  version:
    name: 'default'

  precisions: 
    <<: *common_precisions

  ops:
    <<: *common_ops

  capabilities:
    <<: *common_capabilities

  graph_optimization: 
    <<: *default_optimization
