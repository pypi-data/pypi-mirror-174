[tool.poetry]
name = "jinja-docker-compose"
version = "2.0.2"
description = "Enables jinja like preposessing of docker-compose files."
homepage = "https://github.com/MorganLindqvist/jinja-compose/blob/master/README.md"
repository = "https://github.com/MorganLindqvist/jinja-compose"
authors = ["Morgan <Morgan@quzed.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "jinja_docker_compose", from = "src" }]

[tool.poetry.scripts]
jinja-docker-compose = 'jinja_docker_compose.cli:main'

[tool.poetry.dependencies]
python = "^3.7"
docker-compose = "^1.29.2"
Jinja2 = "^3.1.2"
PyYAML = "^5.4.1"
bcrypt = "^3.2.2"

[tool.poetry.group.dev.dependencies]
flake8 = "^5.0.4"
autopep8 = "^1.7.0"
pytest = "^7.1.3"
commitizen = "^2.35.0"
pre-commit = "^2.20.0"
tox = "^3.27.0"
coverage = {extras = ["toml"], version = "^6.5.0"}
mypy = ">=0.982"
types-pyyaml = "^6.0.12.1"
pytest-clarity = "^1.0.1"

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "-vv"

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.2"
tag_format = "v$version"
version_files = [
    "pyproject.toml:^version",
    "src/jinja_docker_compose/__version__.py",
]
annotated_tag = "true"

[tool.coverage.run]
omit = [".*"]

[tool.coverage.report]
fail_under = 100

[tool.mypy]
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    'compose.cli.main'
]
ignore_missing_imports = 'true'


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
