# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AsScalingGroupAutoScalingConfig',
    'AsScalingGroupAutoScalingConfigDataDisk',
    'AsScalingGroupAutoScalingGroup',
    'AsScalingGroupAutoScalingGroupForwardBalancerId',
    'AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute',
    'ClusterAttachmentWorkerConfig',
    'ClusterAttachmentWorkerConfigDataDisk',
    'ClusterAttachmentWorkerConfigOverrides',
    'ClusterAttachmentWorkerConfigOverridesDataDisk',
    'ClusterAuthOptions',
    'ClusterClusterAudit',
    'ClusterClusterExtraArgs',
    'ClusterEventPersistence',
    'ClusterExistInstance',
    'ClusterExistInstanceInstancesPara',
    'ClusterExtensionAddon',
    'ClusterLogAgent',
    'ClusterMasterConfig',
    'ClusterMasterConfigDataDisk',
    'ClusterNodePoolGlobalConfig',
    'ClusterWorkerConfig',
    'ClusterWorkerConfigDataDisk',
    'ClusterWorkerInstancesList',
    'NodePoolAutoScalingConfig',
    'NodePoolAutoScalingConfigDataDisk',
    'NodePoolNodeConfig',
    'NodePoolNodeConfigDataDisk',
    'NodePoolTaint',
    'ScaleWorkerDataDisk',
    'ScaleWorkerWorkerConfig',
    'ScaleWorkerWorkerConfigDataDisk',
    'ScaleWorkerWorkerInstancesList',
    'GetChartsChartListResult',
    'GetClusterCommonNamesListResult',
    'GetClusterLevelsListResult',
    'GetClustersListResult',
    'GetClustersListClusterExtraArgResult',
    'GetClustersListWorkerInstancesListResult',
]

@pulumi.output_type
class AsScalingGroupAutoScalingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationName":
            suggest = "configuration_name"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "enhancedMonitorService":
            suggest = "enhanced_monitor_service"
        elif key == "enhancedSecurityService":
            suggest = "enhanced_security_service"
        elif key == "instanceTags":
            suggest = "instance_tags"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "keyIds":
            suggest = "key_ids"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "systemDiskSize":
            suggest = "system_disk_size"
        elif key == "systemDiskType":
            suggest = "system_disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsScalingGroupAutoScalingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsScalingGroupAutoScalingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsScalingGroupAutoScalingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_name: str,
                 instance_type: str,
                 data_disks: Optional[Sequence['outputs.AsScalingGroupAutoScalingConfigDataDisk']] = None,
                 enhanced_monitor_service: Optional[bool] = None,
                 enhanced_security_service: Optional[bool] = None,
                 instance_tags: Optional[Mapping[str, Any]] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 key_ids: Optional[Sequence[str]] = None,
                 password: Optional[str] = None,
                 project_id: Optional[int] = None,
                 public_ip_assigned: Optional[bool] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 system_disk_size: Optional[int] = None,
                 system_disk_type: Optional[str] = None):
        """
        :param str configuration_name: Name of a launch configuration.
        :param str instance_type: Specified types of CVM instance.
        :param Sequence['AsScalingGroupAutoScalingConfigDataDiskArgs'] data_disks: Configurations of data disk.
        :param bool enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param bool enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param Mapping[str, Any] instance_tags: A list of tags used to associate different resources.
        :param str internet_charge_type: Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param int internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param Sequence[str] key_ids: ID list of keys.
        :param str password: Password to access.
        :param int project_id: Specifys to which project the configuration belongs.
        :param bool public_ip_assigned: Specify whether to assign an Internet IP address.
        :param Sequence[str] security_group_ids: Security groups to which a CVM instance belongs.
        :param int system_disk_size: Volume of system disk in GB. Default is `50`.
        :param str system_disk_type: Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        pulumi.set(__self__, "configuration_name", configuration_name)
        pulumi.set(__self__, "instance_type", instance_type)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if instance_tags is not None:
            pulumi.set(__self__, "instance_tags", instance_tags)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> str:
        """
        Name of a launch configuration.
        """
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.AsScalingGroupAutoScalingConfigDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> Optional[Mapping[str, Any]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "instance_tags")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        """
        Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[Sequence[str]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        Specifys to which project the configuration belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[int]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[str]:
        """
        Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        return pulumi.get(self, "system_disk_type")


@pulumi.output_type
class AsScalingGroupAutoScalingConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsScalingGroupAutoScalingConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsScalingGroupAutoScalingConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsScalingGroupAutoScalingConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 snapshot_id: Optional[str] = None):
        """
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param str snapshot_id: Data disk snapshot ID.
        """
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class AsScalingGroupAutoScalingGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "scalingGroupName":
            suggest = "scaling_group_name"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "defaultCooldown":
            suggest = "default_cooldown"
        elif key == "desiredCapacity":
            suggest = "desired_capacity"
        elif key == "forwardBalancerIds":
            suggest = "forward_balancer_ids"
        elif key == "loadBalancerIds":
            suggest = "load_balancer_ids"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "retryPolicy":
            suggest = "retry_policy"
        elif key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "terminationPolicies":
            suggest = "termination_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsScalingGroupAutoScalingGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsScalingGroupAutoScalingGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsScalingGroupAutoScalingGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_size: int,
                 min_size: int,
                 scaling_group_name: str,
                 vpc_id: str,
                 default_cooldown: Optional[int] = None,
                 desired_capacity: Optional[int] = None,
                 forward_balancer_ids: Optional[Sequence['outputs.AsScalingGroupAutoScalingGroupForwardBalancerId']] = None,
                 load_balancer_ids: Optional[Sequence[str]] = None,
                 project_id: Optional[int] = None,
                 retry_policy: Optional[str] = None,
                 subnet_ids: Optional[Sequence[str]] = None,
                 tags: Optional[Mapping[str, Any]] = None,
                 termination_policies: Optional[str] = None,
                 zones: Optional[Sequence[str]] = None):
        """
        :param int max_size: Maximum number of CVM instances (0~2000).
        :param int min_size: Minimum number of CVM instances (0~2000).
        :param str scaling_group_name: Name of a scaling group.
        :param str vpc_id: ID of VPC network.
        :param int default_cooldown: Default cooldown time in second, and default value is 300.
        :param int desired_capacity: Desired volume of CVM instances, which is between max_size and min_size.
        :param Sequence['AsScalingGroupAutoScalingGroupForwardBalancerIdArgs'] forward_balancer_ids: List of application load balancers, which can't be specified with load_balancer_ids together.
        :param Sequence[str] load_balancer_ids: ID list of traditional load balancers.
        :param int project_id: Specifys to which project the scaling group belongs.
        :param str retry_policy: Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        :param Sequence[str] subnet_ids: ID list of subnet, and for VPC it is required.
        :param Mapping[str, Any] tags: Tags of a scaling group.
        :param str termination_policies: Available values for termination policies include `OLDEST_INSTANCE` and `NEWEST_INSTANCE`.
        :param Sequence[str] zones: List of available zones, for Basic network it is required.
        """
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if default_cooldown is not None:
            pulumi.set(__self__, "default_cooldown", default_cooldown)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if forward_balancer_ids is not None:
            pulumi.set(__self__, "forward_balancer_ids", forward_balancer_ids)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termination_policies is not None:
            pulumi.set(__self__, "termination_policies", termination_policies)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        Maximum number of CVM instances (0~2000).
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        Minimum number of CVM instances (0~2000).
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> str:
        """
        Name of a scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> Optional[int]:
        """
        Default cooldown time in second, and default value is 300.
        """
        return pulumi.get(self, "default_cooldown")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[int]:
        """
        Desired volume of CVM instances, which is between max_size and min_size.
        """
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter(name="forwardBalancerIds")
    def forward_balancer_ids(self) -> Optional[Sequence['outputs.AsScalingGroupAutoScalingGroupForwardBalancerId']]:
        """
        List of application load balancers, which can't be specified with load_balancer_ids together.
        """
        return pulumi.get(self, "forward_balancer_ids")

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[Sequence[str]]:
        """
        ID list of traditional load balancers.
        """
        return pulumi.get(self, "load_balancer_ids")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        Specifys to which project the scaling group belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[str]:
        """
        Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        """
        return pulumi.get(self, "retry_policy")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        Tags of a scaling group.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Optional[str]:
        """
        Available values for termination policies include `OLDEST_INSTANCE` and `NEWEST_INSTANCE`.
        """
        return pulumi.get(self, "termination_policies")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        """
        List of available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class AsScalingGroupAutoScalingGroupForwardBalancerId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "targetAttributes":
            suggest = "target_attributes"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsScalingGroupAutoScalingGroupForwardBalancerId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsScalingGroupAutoScalingGroupForwardBalancerId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsScalingGroupAutoScalingGroupForwardBalancerId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: str,
                 load_balancer_id: str,
                 target_attributes: Sequence['outputs.AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute'],
                 rule_id: Optional[str] = None):
        """
        :param str listener_id: Listener ID for application load balancers.
        :param str load_balancer_id: ID of available load balancers.
        :param Sequence['AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttributeArgs'] target_attributes: Attribute list of target rules.
        :param str rule_id: ID of forwarding rules.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "target_attributes", target_attributes)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        Listener ID for application load balancers.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        """
        ID of available load balancers.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> Sequence['outputs.AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute']:
        """
        Attribute list of target rules.
        """
        return pulumi.get(self, "target_attributes")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        """
        ID of forwarding rules.
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute(dict):
    def __init__(__self__, *,
                 port: int,
                 weight: int):
        """
        :param int port: Port number.
        :param int weight: Weight.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ClusterAttachmentWorkerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "desiredPodNum":
            suggest = "desired_pod_num"
        elif key == "dockerGraphPath":
            suggest = "docker_graph_path"
        elif key == "extraArgs":
            suggest = "extra_args"
        elif key == "isSchedule":
            suggest = "is_schedule"
        elif key == "mountTarget":
            suggest = "mount_target"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAttachmentWorkerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAttachmentWorkerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAttachmentWorkerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.ClusterAttachmentWorkerConfigDataDisk']] = None,
                 desired_pod_num: Optional[int] = None,
                 docker_graph_path: Optional[str] = None,
                 extra_args: Optional[Sequence[str]] = None,
                 is_schedule: Optional[bool] = None,
                 mount_target: Optional[str] = None,
                 user_data: Optional[str] = None):
        """
        :param Sequence['ClusterAttachmentWorkerConfigDataDiskArgs'] data_disks: Configurations of data disk.
        :param int desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param str docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param Sequence[str] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param bool is_schedule: Indicate to schedule the adding node or not. Default is true.
        :param str mount_target: Mount target. Default is not mounting.
        :param str user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.ClusterAttachmentWorkerConfigDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[int]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[str]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[Sequence[str]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[bool]:
        """
        Indicate to schedule the adding node or not. Default is true.
        """
        return pulumi.get(self, "is_schedule")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class ClusterAttachmentWorkerConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoFormatAndMount":
            suggest = "auto_format_and_mount"
        elif key == "diskPartition":
            suggest = "disk_partition"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "mountTarget":
            suggest = "mount_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAttachmentWorkerConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAttachmentWorkerConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAttachmentWorkerConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_format_and_mount: Optional[bool] = None,
                 disk_partition: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 file_system: Optional[str] = None,
                 mount_target: Optional[str] = None):
        """
        :param bool auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param str disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param str file_system: File system, e.g. `ext3/ext4/xfs`.
        :param str mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[bool]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[str]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")


@pulumi.output_type
class ClusterAttachmentWorkerConfigOverrides(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "desiredPodNum":
            suggest = "desired_pod_num"
        elif key == "dockerGraphPath":
            suggest = "docker_graph_path"
        elif key == "extraArgs":
            suggest = "extra_args"
        elif key == "isSchedule":
            suggest = "is_schedule"
        elif key == "mountTarget":
            suggest = "mount_target"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAttachmentWorkerConfigOverrides. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAttachmentWorkerConfigOverrides.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAttachmentWorkerConfigOverrides.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.ClusterAttachmentWorkerConfigOverridesDataDisk']] = None,
                 desired_pod_num: Optional[int] = None,
                 docker_graph_path: Optional[str] = None,
                 extra_args: Optional[Sequence[str]] = None,
                 is_schedule: Optional[bool] = None,
                 mount_target: Optional[str] = None,
                 user_data: Optional[str] = None):
        """
        :param Sequence['ClusterAttachmentWorkerConfigOverridesDataDiskArgs'] data_disks: Configurations of data disk.
        :param int desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param str docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param Sequence[str] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param bool is_schedule: Indicate to schedule the adding node or not. Default is true.
        :param str mount_target: Mount target. Default is not mounting.
        :param str user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.ClusterAttachmentWorkerConfigOverridesDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[int]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[str]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[Sequence[str]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[bool]:
        """
        Indicate to schedule the adding node or not. Default is true.
        """
        return pulumi.get(self, "is_schedule")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class ClusterAttachmentWorkerConfigOverridesDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoFormatAndMount":
            suggest = "auto_format_and_mount"
        elif key == "diskPartition":
            suggest = "disk_partition"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "mountTarget":
            suggest = "mount_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAttachmentWorkerConfigOverridesDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAttachmentWorkerConfigOverridesDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAttachmentWorkerConfigOverridesDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_format_and_mount: Optional[bool] = None,
                 disk_partition: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 file_system: Optional[str] = None,
                 mount_target: Optional[str] = None):
        """
        :param bool auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param str disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param str file_system: File system, e.g. `ext3/ext4/xfs`.
        :param str mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[bool]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[str]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")


@pulumi.output_type
class ClusterAuthOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoCreateDiscoveryAnonymousAuth":
            suggest = "auto_create_discovery_anonymous_auth"
        elif key == "jwksUri":
            suggest = "jwks_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAuthOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAuthOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAuthOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_create_discovery_anonymous_auth: Optional[bool] = None,
                 issuer: Optional[str] = None,
                 jwks_uri: Optional[str] = None):
        """
        :param bool auto_create_discovery_anonymous_auth: If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
        :param str issuer: Specify service-account-issuer.
        :param str jwks_uri: Specify service-account-jwks-uri.
        """
        if auto_create_discovery_anonymous_auth is not None:
            pulumi.set(__self__, "auto_create_discovery_anonymous_auth", auto_create_discovery_anonymous_auth)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)

    @property
    @pulumi.getter(name="autoCreateDiscoveryAnonymousAuth")
    def auto_create_discovery_anonymous_auth(self) -> Optional[bool]:
        """
        If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
        """
        return pulumi.get(self, "auto_create_discovery_anonymous_auth")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        Specify service-account-issuer.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> Optional[str]:
        """
        Specify service-account-jwks-uri.
        """
        return pulumi.get(self, "jwks_uri")


@pulumi.output_type
class ClusterClusterAudit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logSetId":
            suggest = "log_set_id"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterAudit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterAudit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterAudit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 log_set_id: Optional[str] = None,
                 topic_id: Optional[str] = None):
        """
        :param bool enabled: Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
        :param str log_set_id: Specify id of existing CLS log set, or auto create a new set by leave it empty.
        :param str topic_id: Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        pulumi.set(__self__, "enabled", enabled)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[str]:
        """
        Specify id of existing CLS log set, or auto create a new set by leave it empty.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        """
        Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class ClusterClusterExtraArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kubeApiservers":
            suggest = "kube_apiservers"
        elif key == "kubeControllerManagers":
            suggest = "kube_controller_managers"
        elif key == "kubeSchedulers":
            suggest = "kube_schedulers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterExtraArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterExtraArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterExtraArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kube_apiservers: Optional[Sequence[str]] = None,
                 kube_controller_managers: Optional[Sequence[str]] = None,
                 kube_schedulers: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] kube_apiservers: The customized parameters for kube-apiserver.
        :param Sequence[str] kube_controller_managers: The customized parameters for kube-controller-manager.
        :param Sequence[str] kube_schedulers: The customized parameters for kube-scheduler.
        """
        if kube_apiservers is not None:
            pulumi.set(__self__, "kube_apiservers", kube_apiservers)
        if kube_controller_managers is not None:
            pulumi.set(__self__, "kube_controller_managers", kube_controller_managers)
        if kube_schedulers is not None:
            pulumi.set(__self__, "kube_schedulers", kube_schedulers)

    @property
    @pulumi.getter(name="kubeApiservers")
    def kube_apiservers(self) -> Optional[Sequence[str]]:
        """
        The customized parameters for kube-apiserver.
        """
        return pulumi.get(self, "kube_apiservers")

    @property
    @pulumi.getter(name="kubeControllerManagers")
    def kube_controller_managers(self) -> Optional[Sequence[str]]:
        """
        The customized parameters for kube-controller-manager.
        """
        return pulumi.get(self, "kube_controller_managers")

    @property
    @pulumi.getter(name="kubeSchedulers")
    def kube_schedulers(self) -> Optional[Sequence[str]]:
        """
        The customized parameters for kube-scheduler.
        """
        return pulumi.get(self, "kube_schedulers")


@pulumi.output_type
class ClusterEventPersistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logSetId":
            suggest = "log_set_id"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEventPersistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEventPersistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEventPersistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 log_set_id: Optional[str] = None,
                 topic_id: Optional[str] = None):
        """
        :param bool enabled: Specify weather the Event Persistence enabled.
        :param str log_set_id: Specify id of existing CLS log set, or auto create a new set by leave it empty.
        :param str topic_id: Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        pulumi.set(__self__, "enabled", enabled)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Specify weather the Event Persistence enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[str]:
        """
        Specify id of existing CLS log set, or auto create a new set by leave it empty.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        """
        Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class ClusterExistInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredPodNumbers":
            suggest = "desired_pod_numbers"
        elif key == "instancesPara":
            suggest = "instances_para"
        elif key == "nodeRole":
            suggest = "node_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterExistInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterExistInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterExistInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_pod_numbers: Optional[Sequence[int]] = None,
                 instances_para: Optional['outputs.ClusterExistInstanceInstancesPara'] = None,
                 node_role: Optional[str] = None):
        """
        :param Sequence[int] desired_pod_numbers: Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
        :param 'ClusterExistInstanceInstancesParaArgs' instances_para: Reinstallation parameters of an existing instance.
        :param str node_role: Role of existed node. value:MASTER_ETCD or WORKER.
        """
        if desired_pod_numbers is not None:
            pulumi.set(__self__, "desired_pod_numbers", desired_pod_numbers)
        if instances_para is not None:
            pulumi.set(__self__, "instances_para", instances_para)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)

    @property
    @pulumi.getter(name="desiredPodNumbers")
    def desired_pod_numbers(self) -> Optional[Sequence[int]]:
        """
        Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
        """
        return pulumi.get(self, "desired_pod_numbers")

    @property
    @pulumi.getter(name="instancesPara")
    def instances_para(self) -> Optional['outputs.ClusterExistInstanceInstancesPara']:
        """
        Reinstallation parameters of an existing instance.
        """
        return pulumi.get(self, "instances_para")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        """
        Role of existed node. value:MASTER_ETCD or WORKER.
        """
        return pulumi.get(self, "node_role")


@pulumi.output_type
class ClusterExistInstanceInstancesPara(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceIds":
            suggest = "instance_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterExistInstanceInstancesPara. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterExistInstanceInstancesPara.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterExistInstanceInstancesPara.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_ids: Sequence[str]):
        """
        :param Sequence[str] instance_ids: Cluster IDs.
        """
        pulumi.set(__self__, "instance_ids", instance_ids)

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        """
        Cluster IDs.
        """
        return pulumi.get(self, "instance_ids")


@pulumi.output_type
class ClusterExtensionAddon(dict):
    def __init__(__self__, *,
                 name: str,
                 param: str):
        """
        :param str name: Add-on name.
        :param str param: Description of the add-on resource object in JSON string format.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "param", param)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Add-on name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        Description of the add-on resource object in JSON string format.
        """
        return pulumi.get(self, "param")


@pulumi.output_type
class ClusterLogAgent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kubeletRootDir":
            suggest = "kubelet_root_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterLogAgent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterLogAgent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterLogAgent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 kubelet_root_dir: Optional[str] = None):
        """
        :param bool enabled: Whether the log agent enabled.
        :param str kubelet_root_dir: Kubelet root directory as the literal.
        """
        pulumi.set(__self__, "enabled", enabled)
        if kubelet_root_dir is not None:
            pulumi.set(__self__, "kubelet_root_dir", kubelet_root_dir)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the log agent enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="kubeletRootDir")
    def kubelet_root_dir(self) -> Optional[str]:
        """
        Kubelet root directory as the literal.
        """
        return pulumi.get(self, "kubelet_root_dir")


@pulumi.output_type
class ClusterMasterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "bandwidthPackageId":
            suggest = "bandwidth_package_id"
        elif key == "camRoleName":
            suggest = "cam_role_name"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "desiredPodNum":
            suggest = "desired_pod_num"
        elif key == "disasterRecoverGroupIds":
            suggest = "disaster_recover_group_ids"
        elif key == "enhancedMonitorService":
            suggest = "enhanced_monitor_service"
        elif key == "enhancedSecurityService":
            suggest = "enhanced_security_service"
        elif key == "imgId":
            suggest = "img_id"
        elif key == "instanceChargeType":
            suggest = "instance_charge_type"
        elif key == "instanceChargeTypePrepaidPeriod":
            suggest = "instance_charge_type_prepaid_period"
        elif key == "instanceChargeTypePrepaidRenewFlag":
            suggest = "instance_charge_type_prepaid_renew_flag"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "keyIds":
            suggest = "key_ids"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "systemDiskSize":
            suggest = "system_disk_size"
        elif key == "systemDiskType":
            suggest = "system_disk_type"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMasterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMasterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMasterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 subnet_id: str,
                 availability_zone: Optional[str] = None,
                 bandwidth_package_id: Optional[str] = None,
                 cam_role_name: Optional[str] = None,
                 count: Optional[int] = None,
                 data_disks: Optional[Sequence['outputs.ClusterMasterConfigDataDisk']] = None,
                 desired_pod_num: Optional[int] = None,
                 disaster_recover_group_ids: Optional[str] = None,
                 enhanced_monitor_service: Optional[bool] = None,
                 enhanced_security_service: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 img_id: Optional[str] = None,
                 instance_charge_type: Optional[str] = None,
                 instance_charge_type_prepaid_period: Optional[int] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 key_ids: Optional[str] = None,
                 password: Optional[str] = None,
                 public_ip_assigned: Optional[bool] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 system_disk_size: Optional[int] = None,
                 system_disk_type: Optional[str] = None,
                 user_data: Optional[str] = None):
        """
        :param str instance_type: Specified types of CVM instance.
        :param str subnet_id: Private network ID.
        :param str availability_zone: Indicates which availability zone will be used.
        :param str bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param str cam_role_name: CAM role name authorized to access.
        :param int count: Number of cvm.
        :param Sequence['ClusterMasterConfigDataDiskArgs'] data_disks: Configurations of data disk.
        :param int desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param str disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param bool enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param bool enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param str hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param str img_id: The valid image id, format of img-xxx.
        :param str instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param int instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param str instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param str instance_name: Name of the CVMs.
        :param str internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param int internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param str key_ids: ID list of keys, should be set if `password` not set.
        :param str password: Password to access, should be set if `key_ids` not set.
        :param bool public_ip_assigned: Specify whether to assign an Internet IP address.
        :param Sequence[str] security_group_ids: Security groups to which a CVM instance belongs.
        :param int system_disk_size: Volume of system disk in GB. Default is `50`.
        :param str system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param str user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[str]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[str]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.ClusterMasterConfigDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[int]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[str]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[str]:
        """
        The valid image id, format of img-xxx.
        """
        return pulumi.get(self, "img_id")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[str]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[int]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[str]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[str]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[int]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[str]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class ClusterMasterConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoFormatAndMount":
            suggest = "auto_format_and_mount"
        elif key == "diskPartition":
            suggest = "disk_partition"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "mountTarget":
            suggest = "mount_target"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMasterConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMasterConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMasterConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_format_and_mount: Optional[bool] = None,
                 disk_partition: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 file_system: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 mount_target: Optional[str] = None,
                 snapshot_id: Optional[str] = None):
        """
        :param bool auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param str disk_partition: The name of the device or partition to mount.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param bool encrypt: Indicates whether to encrypt data disk, default `false`.
        :param str file_system: File system, e.g. `ext3/ext4/xfs`.
        :param str kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param str mount_target: Mount target.
        :param str snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[bool]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[str]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class ClusterNodePoolGlobalConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreDaemonSetsUtilization":
            suggest = "ignore_daemon_sets_utilization"
        elif key == "isScaleInEnabled":
            suggest = "is_scale_in_enabled"
        elif key == "maxConcurrentScaleIn":
            suggest = "max_concurrent_scale_in"
        elif key == "scaleInDelay":
            suggest = "scale_in_delay"
        elif key == "scaleInUnneededTime":
            suggest = "scale_in_unneeded_time"
        elif key == "scaleInUtilizationThreshold":
            suggest = "scale_in_utilization_threshold"
        elif key == "skipNodesWithLocalStorage":
            suggest = "skip_nodes_with_local_storage"
        elif key == "skipNodesWithSystemPods":
            suggest = "skip_nodes_with_system_pods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodePoolGlobalConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodePoolGlobalConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodePoolGlobalConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expander: Optional[str] = None,
                 ignore_daemon_sets_utilization: Optional[bool] = None,
                 is_scale_in_enabled: Optional[bool] = None,
                 max_concurrent_scale_in: Optional[int] = None,
                 scale_in_delay: Optional[int] = None,
                 scale_in_unneeded_time: Optional[int] = None,
                 scale_in_utilization_threshold: Optional[int] = None,
                 skip_nodes_with_local_storage: Optional[bool] = None,
                 skip_nodes_with_system_pods: Optional[bool] = None):
        """
        :param str expander: Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
        :param bool ignore_daemon_sets_utilization: Whether to ignore DaemonSet pods by default when calculating resource usage.
        :param bool is_scale_in_enabled: Indicates whether to enable scale-in.
        :param int max_concurrent_scale_in: Max concurrent scale-in volume.
        :param int scale_in_delay: Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
        :param int scale_in_unneeded_time: Number of consecutive minutes of idleness after which the node is subject to scale-in.
        :param int scale_in_utilization_threshold: Percentage of node resource usage below which the node is considered to be idle.
        :param bool skip_nodes_with_local_storage: During scale-in, ignore nodes with local storage pods.
        :param bool skip_nodes_with_system_pods: During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
        """
        if expander is not None:
            pulumi.set(__self__, "expander", expander)
        if ignore_daemon_sets_utilization is not None:
            pulumi.set(__self__, "ignore_daemon_sets_utilization", ignore_daemon_sets_utilization)
        if is_scale_in_enabled is not None:
            pulumi.set(__self__, "is_scale_in_enabled", is_scale_in_enabled)
        if max_concurrent_scale_in is not None:
            pulumi.set(__self__, "max_concurrent_scale_in", max_concurrent_scale_in)
        if scale_in_delay is not None:
            pulumi.set(__self__, "scale_in_delay", scale_in_delay)
        if scale_in_unneeded_time is not None:
            pulumi.set(__self__, "scale_in_unneeded_time", scale_in_unneeded_time)
        if scale_in_utilization_threshold is not None:
            pulumi.set(__self__, "scale_in_utilization_threshold", scale_in_utilization_threshold)
        if skip_nodes_with_local_storage is not None:
            pulumi.set(__self__, "skip_nodes_with_local_storage", skip_nodes_with_local_storage)
        if skip_nodes_with_system_pods is not None:
            pulumi.set(__self__, "skip_nodes_with_system_pods", skip_nodes_with_system_pods)

    @property
    @pulumi.getter
    def expander(self) -> Optional[str]:
        """
        Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
        """
        return pulumi.get(self, "expander")

    @property
    @pulumi.getter(name="ignoreDaemonSetsUtilization")
    def ignore_daemon_sets_utilization(self) -> Optional[bool]:
        """
        Whether to ignore DaemonSet pods by default when calculating resource usage.
        """
        return pulumi.get(self, "ignore_daemon_sets_utilization")

    @property
    @pulumi.getter(name="isScaleInEnabled")
    def is_scale_in_enabled(self) -> Optional[bool]:
        """
        Indicates whether to enable scale-in.
        """
        return pulumi.get(self, "is_scale_in_enabled")

    @property
    @pulumi.getter(name="maxConcurrentScaleIn")
    def max_concurrent_scale_in(self) -> Optional[int]:
        """
        Max concurrent scale-in volume.
        """
        return pulumi.get(self, "max_concurrent_scale_in")

    @property
    @pulumi.getter(name="scaleInDelay")
    def scale_in_delay(self) -> Optional[int]:
        """
        Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
        """
        return pulumi.get(self, "scale_in_delay")

    @property
    @pulumi.getter(name="scaleInUnneededTime")
    def scale_in_unneeded_time(self) -> Optional[int]:
        """
        Number of consecutive minutes of idleness after which the node is subject to scale-in.
        """
        return pulumi.get(self, "scale_in_unneeded_time")

    @property
    @pulumi.getter(name="scaleInUtilizationThreshold")
    def scale_in_utilization_threshold(self) -> Optional[int]:
        """
        Percentage of node resource usage below which the node is considered to be idle.
        """
        return pulumi.get(self, "scale_in_utilization_threshold")

    @property
    @pulumi.getter(name="skipNodesWithLocalStorage")
    def skip_nodes_with_local_storage(self) -> Optional[bool]:
        """
        During scale-in, ignore nodes with local storage pods.
        """
        return pulumi.get(self, "skip_nodes_with_local_storage")

    @property
    @pulumi.getter(name="skipNodesWithSystemPods")
    def skip_nodes_with_system_pods(self) -> Optional[bool]:
        """
        During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
        """
        return pulumi.get(self, "skip_nodes_with_system_pods")


@pulumi.output_type
class ClusterWorkerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "bandwidthPackageId":
            suggest = "bandwidth_package_id"
        elif key == "camRoleName":
            suggest = "cam_role_name"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "desiredPodNum":
            suggest = "desired_pod_num"
        elif key == "disasterRecoverGroupIds":
            suggest = "disaster_recover_group_ids"
        elif key == "enhancedMonitorService":
            suggest = "enhanced_monitor_service"
        elif key == "enhancedSecurityService":
            suggest = "enhanced_security_service"
        elif key == "imgId":
            suggest = "img_id"
        elif key == "instanceChargeType":
            suggest = "instance_charge_type"
        elif key == "instanceChargeTypePrepaidPeriod":
            suggest = "instance_charge_type_prepaid_period"
        elif key == "instanceChargeTypePrepaidRenewFlag":
            suggest = "instance_charge_type_prepaid_renew_flag"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "keyIds":
            suggest = "key_ids"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "systemDiskSize":
            suggest = "system_disk_size"
        elif key == "systemDiskType":
            suggest = "system_disk_type"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterWorkerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterWorkerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterWorkerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 subnet_id: str,
                 availability_zone: Optional[str] = None,
                 bandwidth_package_id: Optional[str] = None,
                 cam_role_name: Optional[str] = None,
                 count: Optional[int] = None,
                 data_disks: Optional[Sequence['outputs.ClusterWorkerConfigDataDisk']] = None,
                 desired_pod_num: Optional[int] = None,
                 disaster_recover_group_ids: Optional[str] = None,
                 enhanced_monitor_service: Optional[bool] = None,
                 enhanced_security_service: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 img_id: Optional[str] = None,
                 instance_charge_type: Optional[str] = None,
                 instance_charge_type_prepaid_period: Optional[int] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 key_ids: Optional[str] = None,
                 password: Optional[str] = None,
                 public_ip_assigned: Optional[bool] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 system_disk_size: Optional[int] = None,
                 system_disk_type: Optional[str] = None,
                 user_data: Optional[str] = None):
        """
        :param str instance_type: Specified types of CVM instance.
        :param str subnet_id: Private network ID.
        :param str availability_zone: Indicates which availability zone will be used.
        :param str bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param str cam_role_name: CAM role name authorized to access.
        :param int count: Number of cvm.
        :param Sequence['ClusterWorkerConfigDataDiskArgs'] data_disks: Configurations of data disk.
        :param int desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param str disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param bool enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param bool enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param str hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param str img_id: The valid image id, format of img-xxx.
        :param str instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param int instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param str instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param str instance_name: Name of the CVMs.
        :param str internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param int internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param str key_ids: ID list of keys, should be set if `password` not set.
        :param str password: Password to access, should be set if `key_ids` not set.
        :param bool public_ip_assigned: Specify whether to assign an Internet IP address.
        :param Sequence[str] security_group_ids: Security groups to which a CVM instance belongs.
        :param int system_disk_size: Volume of system disk in GB. Default is `50`.
        :param str system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param str user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[str]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[str]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.ClusterWorkerConfigDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[int]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[str]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[str]:
        """
        The valid image id, format of img-xxx.
        """
        return pulumi.get(self, "img_id")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[str]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[int]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[str]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[str]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[int]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[str]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class ClusterWorkerConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoFormatAndMount":
            suggest = "auto_format_and_mount"
        elif key == "diskPartition":
            suggest = "disk_partition"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "mountTarget":
            suggest = "mount_target"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterWorkerConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterWorkerConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterWorkerConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_format_and_mount: Optional[bool] = None,
                 disk_partition: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 file_system: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 mount_target: Optional[str] = None,
                 snapshot_id: Optional[str] = None):
        """
        :param bool auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param str disk_partition: The name of the device or partition to mount.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param bool encrypt: Indicates whether to encrypt data disk, default `false`.
        :param str file_system: File system, e.g. `ext3/ext4/xfs`.
        :param str kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param str mount_target: Mount target.
        :param str snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[bool]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[str]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class ClusterWorkerInstancesList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedReason":
            suggest = "failed_reason"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceRole":
            suggest = "instance_role"
        elif key == "instanceState":
            suggest = "instance_state"
        elif key == "lanIp":
            suggest = "lan_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterWorkerInstancesList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterWorkerInstancesList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterWorkerInstancesList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failed_reason: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 instance_role: Optional[str] = None,
                 instance_state: Optional[str] = None,
                 lan_ip: Optional[str] = None):
        """
        :param str failed_reason: Information of the cvm when it is failed.
        :param str instance_id: ID of the cvm.
        :param str instance_role: Role of the cvm.
        :param str instance_state: State of the cvm.
        :param str lan_ip: LAN IP of the cvm.
        """
        if failed_reason is not None:
            pulumi.set(__self__, "failed_reason", failed_reason)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_role is not None:
            pulumi.set(__self__, "instance_role", instance_role)
        if instance_state is not None:
            pulumi.set(__self__, "instance_state", instance_state)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> Optional[str]:
        """
        Information of the cvm when it is failed.
        """
        return pulumi.get(self, "failed_reason")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        ID of the cvm.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> Optional[str]:
        """
        Role of the cvm.
        """
        return pulumi.get(self, "instance_role")

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> Optional[str]:
        """
        State of the cvm.
        """
        return pulumi.get(self, "instance_state")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[str]:
        """
        LAN IP of the cvm.
        """
        return pulumi.get(self, "lan_ip")


@pulumi.output_type
class NodePoolAutoScalingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "backupInstanceTypes":
            suggest = "backup_instance_types"
        elif key == "bandwidthPackageId":
            suggest = "bandwidth_package_id"
        elif key == "camRoleName":
            suggest = "cam_role_name"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "enhancedMonitorService":
            suggest = "enhanced_monitor_service"
        elif key == "enhancedSecurityService":
            suggest = "enhanced_security_service"
        elif key == "instanceChargeType":
            suggest = "instance_charge_type"
        elif key == "instanceChargeTypePrepaidPeriod":
            suggest = "instance_charge_type_prepaid_period"
        elif key == "instanceChargeTypePrepaidRenewFlag":
            suggest = "instance_charge_type_prepaid_renew_flag"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "keyIds":
            suggest = "key_ids"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "spotInstanceType":
            suggest = "spot_instance_type"
        elif key == "spotMaxPrice":
            suggest = "spot_max_price"
        elif key == "systemDiskSize":
            suggest = "system_disk_size"
        elif key == "systemDiskType":
            suggest = "system_disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolAutoScalingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolAutoScalingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolAutoScalingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 backup_instance_types: Optional[Sequence[str]] = None,
                 bandwidth_package_id: Optional[str] = None,
                 cam_role_name: Optional[str] = None,
                 data_disks: Optional[Sequence['outputs.NodePoolAutoScalingConfigDataDisk']] = None,
                 enhanced_monitor_service: Optional[bool] = None,
                 enhanced_security_service: Optional[bool] = None,
                 instance_charge_type: Optional[str] = None,
                 instance_charge_type_prepaid_period: Optional[int] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[str] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 key_ids: Optional[Sequence[str]] = None,
                 password: Optional[str] = None,
                 public_ip_assigned: Optional[bool] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 spot_instance_type: Optional[str] = None,
                 spot_max_price: Optional[str] = None,
                 system_disk_size: Optional[int] = None,
                 system_disk_type: Optional[str] = None):
        """
        :param str instance_type: Specified types of CVM instance.
        :param Sequence[str] backup_instance_types: Backup CVM instance types if specified instance type sold out or mismatch.
        :param str bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param str cam_role_name: Name of cam role.
        :param Sequence['NodePoolAutoScalingConfigDataDiskArgs'] data_disks: Configurations of data disk.
        :param bool enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param bool enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param str instance_charge_type: Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        :param int instance_charge_type_prepaid_period: The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param str instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param str internet_charge_type: Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param int internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param Sequence[str] key_ids: ID list of keys.
        :param str password: Password to access.
        :param bool public_ip_assigned: Specify whether to assign an Internet IP address.
        :param Sequence[str] security_group_ids: Security groups to which a CVM instance belongs.
        :param str spot_instance_type: Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param str spot_max_price: Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param int system_disk_size: Volume of system disk in GB. Default is `50`.
        :param str system_disk_type: Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        if backup_instance_types is not None:
            pulumi.set(__self__, "backup_instance_types", backup_instance_types)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)
        if spot_max_price is not None:
            pulumi.set(__self__, "spot_max_price", spot_max_price)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="backupInstanceTypes")
    def backup_instance_types(self) -> Optional[Sequence[str]]:
        """
        Backup CVM instance types if specified instance type sold out or mismatch.
        """
        return pulumi.get(self, "backup_instance_types")

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[str]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[str]:
        """
        Name of cam role.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NodePoolAutoScalingConfigDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[str]:
        """
        Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[int]:
        """
        The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[str]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        """
        Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[Sequence[str]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[str]:
        """
        Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_instance_type")

    @property
    @pulumi.getter(name="spotMaxPrice")
    def spot_max_price(self) -> Optional[str]:
        """
        Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_max_price")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[int]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[str]:
        """
        Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        return pulumi.get(self, "system_disk_type")


@pulumi.output_type
class NodePoolAutoScalingConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteWithInstance":
            suggest = "delete_with_instance"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolAutoScalingConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolAutoScalingConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolAutoScalingConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_with_instance: Optional[bool] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 snapshot_id: Optional[str] = None):
        """
        :param bool delete_with_instance: Indicates whether the disk remove after instance terminated.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param str snapshot_id: Data disk snapshot ID.
        """
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        """
        Indicates whether the disk remove after instance terminated.
        """
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class NodePoolNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDisks":
            suggest = "data_disks"
        elif key == "desiredPodNum":
            suggest = "desired_pod_num"
        elif key == "dockerGraphPath":
            suggest = "docker_graph_path"
        elif key == "extraArgs":
            suggest = "extra_args"
        elif key == "isSchedule":
            suggest = "is_schedule"
        elif key == "mountTarget":
            suggest = "mount_target"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_disks: Optional[Sequence['outputs.NodePoolNodeConfigDataDisk']] = None,
                 desired_pod_num: Optional[int] = None,
                 docker_graph_path: Optional[str] = None,
                 extra_args: Optional[Sequence[str]] = None,
                 is_schedule: Optional[bool] = None,
                 mount_target: Optional[str] = None,
                 user_data: Optional[str] = None):
        """
        :param Sequence['NodePoolNodeConfigDataDiskArgs'] data_disks: Configurations of data disk.
        :param int desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param str docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param Sequence[str] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param bool is_schedule: Indicate to schedule the adding node or not. Default is true.
        :param str mount_target: Mount target. Default is not mounting.
        :param str user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.NodePoolNodeConfigDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[int]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[str]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[Sequence[str]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[bool]:
        """
        Indicate to schedule the adding node or not. Default is true.
        """
        return pulumi.get(self, "is_schedule")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class NodePoolNodeConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoFormatAndMount":
            suggest = "auto_format_and_mount"
        elif key == "diskPartition":
            suggest = "disk_partition"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "mountTarget":
            suggest = "mount_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_format_and_mount: Optional[bool] = None,
                 disk_partition: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 file_system: Optional[str] = None,
                 mount_target: Optional[str] = None):
        """
        :param bool auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param str disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param str file_system: File system, e.g. `ext3/ext4/xfs`.
        :param str mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[bool]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[str]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")


@pulumi.output_type
class NodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        :param str key: Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param str value: Value of the taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ScaleWorkerDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoFormatAndMount":
            suggest = "auto_format_and_mount"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "mountTarget":
            suggest = "mount_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScaleWorkerDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScaleWorkerDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScaleWorkerDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_format_and_mount: Optional[bool] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 file_system: Optional[str] = None,
                 mount_target: Optional[str] = None):
        """
        :param bool auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param str file_system: File system, e.g. `ext3/ext4/xfs`.
        :param str mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[bool]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")


@pulumi.output_type
class ScaleWorkerWorkerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "bandwidthPackageId":
            suggest = "bandwidth_package_id"
        elif key == "camRoleName":
            suggest = "cam_role_name"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "desiredPodNum":
            suggest = "desired_pod_num"
        elif key == "disasterRecoverGroupIds":
            suggest = "disaster_recover_group_ids"
        elif key == "enhancedMonitorService":
            suggest = "enhanced_monitor_service"
        elif key == "enhancedSecurityService":
            suggest = "enhanced_security_service"
        elif key == "imgId":
            suggest = "img_id"
        elif key == "instanceChargeType":
            suggest = "instance_charge_type"
        elif key == "instanceChargeTypePrepaidPeriod":
            suggest = "instance_charge_type_prepaid_period"
        elif key == "instanceChargeTypePrepaidRenewFlag":
            suggest = "instance_charge_type_prepaid_renew_flag"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "keyIds":
            suggest = "key_ids"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "systemDiskSize":
            suggest = "system_disk_size"
        elif key == "systemDiskType":
            suggest = "system_disk_type"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScaleWorkerWorkerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScaleWorkerWorkerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScaleWorkerWorkerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 subnet_id: str,
                 availability_zone: Optional[str] = None,
                 bandwidth_package_id: Optional[str] = None,
                 cam_role_name: Optional[str] = None,
                 count: Optional[int] = None,
                 data_disks: Optional[Sequence['outputs.ScaleWorkerWorkerConfigDataDisk']] = None,
                 desired_pod_num: Optional[int] = None,
                 disaster_recover_group_ids: Optional[str] = None,
                 enhanced_monitor_service: Optional[bool] = None,
                 enhanced_security_service: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 img_id: Optional[str] = None,
                 instance_charge_type: Optional[str] = None,
                 instance_charge_type_prepaid_period: Optional[int] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 key_ids: Optional[str] = None,
                 password: Optional[str] = None,
                 public_ip_assigned: Optional[bool] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 system_disk_size: Optional[int] = None,
                 system_disk_type: Optional[str] = None,
                 user_data: Optional[str] = None):
        """
        :param str instance_type: Specified types of CVM instance.
        :param str subnet_id: Private network ID.
        :param str availability_zone: Indicates which availability zone will be used.
        :param str bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param str cam_role_name: CAM role name authorized to access.
        :param int count: Number of cvm.
        :param Sequence['ScaleWorkerWorkerConfigDataDiskArgs'] data_disks: Configurations of data disk.
        :param int desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param str disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param bool enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param bool enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param str hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param str img_id: The valid image id, format of img-xxx.
        :param str instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param int instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param str instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param str instance_name: Name of the CVMs.
        :param str internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param int internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param str key_ids: ID list of keys, should be set if `password` not set.
        :param str password: Password to access, should be set if `key_ids` not set.
        :param bool public_ip_assigned: Specify whether to assign an Internet IP address.
        :param Sequence[str] security_group_ids: Security groups to which a CVM instance belongs.
        :param int system_disk_size: Volume of system disk in GB. Default is `50`.
        :param str system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param str user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[str]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[str]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[Sequence['outputs.ScaleWorkerWorkerConfigDataDisk']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[int]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[str]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[bool]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[str]:
        """
        The valid image id, format of img-xxx.
        """
        return pulumi.get(self, "img_id")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[str]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[int]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[str]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[str]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[int]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[str]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class ScaleWorkerWorkerConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoFormatAndMount":
            suggest = "auto_format_and_mount"
        elif key == "diskPartition":
            suggest = "disk_partition"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "fileSystem":
            suggest = "file_system"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "mountTarget":
            suggest = "mount_target"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScaleWorkerWorkerConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScaleWorkerWorkerConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScaleWorkerWorkerConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_format_and_mount: Optional[bool] = None,
                 disk_partition: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 file_system: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 mount_target: Optional[str] = None,
                 snapshot_id: Optional[str] = None):
        """
        :param bool auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param str disk_partition: The name of the device or partition to mount.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param bool encrypt: Indicates whether to encrypt data disk, default `false`.
        :param str file_system: File system, e.g. `ext3/ext4/xfs`.
        :param str kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param str mount_target: Mount target.
        :param str snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[bool]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[str]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[str]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[str]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class ScaleWorkerWorkerInstancesList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedReason":
            suggest = "failed_reason"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceRole":
            suggest = "instance_role"
        elif key == "instanceState":
            suggest = "instance_state"
        elif key == "lanIp":
            suggest = "lan_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScaleWorkerWorkerInstancesList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScaleWorkerWorkerInstancesList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScaleWorkerWorkerInstancesList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failed_reason: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 instance_role: Optional[str] = None,
                 instance_state: Optional[str] = None,
                 lan_ip: Optional[str] = None):
        """
        :param str failed_reason: Information of the cvm when it is failed.
        :param str instance_id: ID of the cvm.
        :param str instance_role: Role of the cvm.
        :param str instance_state: State of the cvm.
        :param str lan_ip: LAN IP of the cvm.
        """
        if failed_reason is not None:
            pulumi.set(__self__, "failed_reason", failed_reason)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_role is not None:
            pulumi.set(__self__, "instance_role", instance_role)
        if instance_state is not None:
            pulumi.set(__self__, "instance_state", instance_state)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> Optional[str]:
        """
        Information of the cvm when it is failed.
        """
        return pulumi.get(self, "failed_reason")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        ID of the cvm.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> Optional[str]:
        """
        Role of the cvm.
        """
        return pulumi.get(self, "instance_role")

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> Optional[str]:
        """
        State of the cvm.
        """
        return pulumi.get(self, "instance_state")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[str]:
        """
        LAN IP of the cvm.
        """
        return pulumi.get(self, "lan_ip")


@pulumi.output_type
class GetChartsChartListResult(dict):
    def __init__(__self__, *,
                 label: Mapping[str, Any],
                 latest_version: str,
                 name: str):
        """
        :param Mapping[str, Any] label: Label of chart.
        :param str latest_version: Chart latest version.
        :param str name: Name of chart.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def label(self) -> Mapping[str, Any]:
        """
        Label of chart.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> str:
        """
        Chart latest version.
        """
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of chart.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterCommonNamesListResult(dict):
    def __init__(__self__, *,
                 common_names: str,
                 subaccount_uin: str):
        """
        :param str common_names: The CommonName in the certificate of the client corresponding to the sub-account.
        :param str subaccount_uin: User UIN.
        """
        pulumi.set(__self__, "common_names", common_names)
        pulumi.set(__self__, "subaccount_uin", subaccount_uin)

    @property
    @pulumi.getter(name="commonNames")
    def common_names(self) -> str:
        """
        The CommonName in the certificate of the client corresponding to the sub-account.
        """
        return pulumi.get(self, "common_names")

    @property
    @pulumi.getter(name="subaccountUin")
    def subaccount_uin(self) -> str:
        """
        User UIN.
        """
        return pulumi.get(self, "subaccount_uin")


@pulumi.output_type
class GetClusterLevelsListResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 config_map_count: int,
                 crd_count: int,
                 enable: bool,
                 name: str,
                 node_count: int,
                 other_count: int,
                 pod_count: int):
        """
        :param str alias: Alias used for pass to cluster level arguments.
        :param int config_map_count: Number of ConfigMaps.
        :param int crd_count: Number of CRDs.
        :param bool enable: Indicates whether the current level enabled.
        :param str name: Level name.
        :param int node_count: Number of nodes.
        :param int other_count: Number of others.
        :param int pod_count: Number of pods.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "config_map_count", config_map_count)
        pulumi.set(__self__, "crd_count", crd_count)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "other_count", other_count)
        pulumi.set(__self__, "pod_count", pod_count)

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        Alias used for pass to cluster level arguments.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="configMapCount")
    def config_map_count(self) -> int:
        """
        Number of ConfigMaps.
        """
        return pulumi.get(self, "config_map_count")

    @property
    @pulumi.getter(name="crdCount")
    def crd_count(self) -> int:
        """
        Number of CRDs.
        """
        return pulumi.get(self, "crd_count")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Indicates whether the current level enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Level name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="otherCount")
    def other_count(self) -> int:
        """
        Number of others.
        """
        return pulumi.get(self, "other_count")

    @property
    @pulumi.getter(name="podCount")
    def pod_count(self) -> int:
        """
        Number of pods.
        """
        return pulumi.get(self, "pod_count")


@pulumi.output_type
class GetClustersListResult(dict):
    def __init__(__self__, *,
                 certification_authority: str,
                 claim_expired_seconds: int,
                 cluster_as_enabled: bool,
                 cluster_cidr: str,
                 cluster_deploy_type: str,
                 cluster_desc: str,
                 cluster_external_endpoint: str,
                 cluster_extra_args: Sequence['outputs.GetClustersListClusterExtraArgResult'],
                 cluster_id: str,
                 cluster_ipvs: bool,
                 cluster_max_pod_num: int,
                 cluster_max_service_num: int,
                 cluster_name: str,
                 cluster_node_num: int,
                 cluster_os: str,
                 cluster_version: str,
                 container_runtime: str,
                 deletion_protection: bool,
                 domain: str,
                 eni_subnet_ids: Sequence[str],
                 ignore_cluster_cidr_conflict: bool,
                 is_non_static_ip_mode: bool,
                 kube_config: str,
                 kube_config_intranet: str,
                 kube_proxy_mode: str,
                 network_type: str,
                 node_name_type: str,
                 password: str,
                 pgw_endpoint: str,
                 project_id: int,
                 security_policies: Sequence[str],
                 service_cidr: str,
                 tags: Mapping[str, Any],
                 user_name: str,
                 vpc_id: str,
                 worker_instances_lists: Sequence['outputs.GetClustersListWorkerInstancesListResult']):
        """
        :param str certification_authority: The certificate used for access.
        :param int claim_expired_seconds: The expired seconds to recycle ENI.
        :param bool cluster_as_enabled: Indicates whether to enable cluster node auto scaler.
        :param str cluster_cidr: A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this VPC.
        :param str cluster_deploy_type: Deployment type of the cluster.
        :param str cluster_desc: Description of the cluster.
        :param str cluster_external_endpoint: External network address to access.
        :param Sequence['GetClustersListClusterExtraArgArgs'] cluster_extra_args: Customized parameters for master component.
        :param str cluster_id: ID of the cluster. Conflict with cluster_name, can not be set at the same time.
        :param bool cluster_ipvs: Indicates whether ipvs is enabled.
        :param int cluster_max_pod_num: The maximum number of Pods per node in the cluster.
        :param int cluster_max_service_num: The maximum number of services in the cluster.
        :param str cluster_name: Name of the cluster. Conflict with cluster_id, can not be set at the same time.
        :param int cluster_node_num: Number of nodes in the cluster.
        :param str cluster_os: Operating system of the cluster.
        :param str cluster_version: Version of the cluster.
        :param str container_runtime: (**Deprecated**) It has been deprecated from version 1.18.1. Container runtime of the cluster.
        :param bool deletion_protection: Indicates whether cluster deletion protection is enabled.
        :param str domain: Domain name for access.
        :param Sequence[str] eni_subnet_ids: Subnet IDs for cluster with VPC-CNI network mode.
        :param bool ignore_cluster_cidr_conflict: Indicates whether to ignore the cluster cidr conflict error.
        :param bool is_non_static_ip_mode: Indicates whether non-static ip mode is enabled.
        :param str kube_config: Kubernetes config.
        :param str kube_config_intranet: Kubernetes config of private network.
        :param str kube_proxy_mode: Cluster kube-proxy mode.
        :param str network_type: Cluster network type.
        :param str node_name_type: Node name type of cluster.
        :param str password: Password of account.
        :param str pgw_endpoint: The Intranet address used for access.
        :param int project_id: Project ID of the cluster.
        :param Sequence[str] security_policies: Access policy.
        :param str service_cidr: The network address block of the cluster.
        :param Mapping[str, Any] tags: Tags of the cluster.
        :param str user_name: User name of account.
        :param str vpc_id: Vpc ID of the cluster.
        :param Sequence['GetClustersListWorkerInstancesListArgs'] worker_instances_lists: An information list of cvm within the WORKER clusters. Each element contains the following attributes.
        """
        pulumi.set(__self__, "certification_authority", certification_authority)
        pulumi.set(__self__, "claim_expired_seconds", claim_expired_seconds)
        pulumi.set(__self__, "cluster_as_enabled", cluster_as_enabled)
        pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        pulumi.set(__self__, "cluster_deploy_type", cluster_deploy_type)
        pulumi.set(__self__, "cluster_desc", cluster_desc)
        pulumi.set(__self__, "cluster_external_endpoint", cluster_external_endpoint)
        pulumi.set(__self__, "cluster_extra_args", cluster_extra_args)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_ipvs", cluster_ipvs)
        pulumi.set(__self__, "cluster_max_pod_num", cluster_max_pod_num)
        pulumi.set(__self__, "cluster_max_service_num", cluster_max_service_num)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_node_num", cluster_node_num)
        pulumi.set(__self__, "cluster_os", cluster_os)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "container_runtime", container_runtime)
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "eni_subnet_ids", eni_subnet_ids)
        pulumi.set(__self__, "ignore_cluster_cidr_conflict", ignore_cluster_cidr_conflict)
        pulumi.set(__self__, "is_non_static_ip_mode", is_non_static_ip_mode)
        pulumi.set(__self__, "kube_config", kube_config)
        pulumi.set(__self__, "kube_config_intranet", kube_config_intranet)
        pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "node_name_type", node_name_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "pgw_endpoint", pgw_endpoint)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_policies", security_policies)
        pulumi.set(__self__, "service_cidr", service_cidr)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "worker_instances_lists", worker_instances_lists)

    @property
    @pulumi.getter(name="certificationAuthority")
    def certification_authority(self) -> str:
        """
        The certificate used for access.
        """
        return pulumi.get(self, "certification_authority")

    @property
    @pulumi.getter(name="claimExpiredSeconds")
    def claim_expired_seconds(self) -> int:
        """
        The expired seconds to recycle ENI.
        """
        return pulumi.get(self, "claim_expired_seconds")

    @property
    @pulumi.getter(name="clusterAsEnabled")
    def cluster_as_enabled(self) -> bool:
        """
        Indicates whether to enable cluster node auto scaler.
        """
        return pulumi.get(self, "cluster_as_enabled")

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> str:
        """
        A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this VPC.
        """
        return pulumi.get(self, "cluster_cidr")

    @property
    @pulumi.getter(name="clusterDeployType")
    def cluster_deploy_type(self) -> str:
        """
        Deployment type of the cluster.
        """
        return pulumi.get(self, "cluster_deploy_type")

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> str:
        """
        Description of the cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @property
    @pulumi.getter(name="clusterExternalEndpoint")
    def cluster_external_endpoint(self) -> str:
        """
        External network address to access.
        """
        return pulumi.get(self, "cluster_external_endpoint")

    @property
    @pulumi.getter(name="clusterExtraArgs")
    def cluster_extra_args(self) -> Sequence['outputs.GetClustersListClusterExtraArgResult']:
        """
        Customized parameters for master component.
        """
        return pulumi.get(self, "cluster_extra_args")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        ID of the cluster. Conflict with cluster_name, can not be set at the same time.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterIpvs")
    def cluster_ipvs(self) -> bool:
        """
        Indicates whether ipvs is enabled.
        """
        return pulumi.get(self, "cluster_ipvs")

    @property
    @pulumi.getter(name="clusterMaxPodNum")
    def cluster_max_pod_num(self) -> int:
        """
        The maximum number of Pods per node in the cluster.
        """
        return pulumi.get(self, "cluster_max_pod_num")

    @property
    @pulumi.getter(name="clusterMaxServiceNum")
    def cluster_max_service_num(self) -> int:
        """
        The maximum number of services in the cluster.
        """
        return pulumi.get(self, "cluster_max_service_num")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Name of the cluster. Conflict with cluster_id, can not be set at the same time.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterNodeNum")
    def cluster_node_num(self) -> int:
        """
        Number of nodes in the cluster.
        """
        return pulumi.get(self, "cluster_node_num")

    @property
    @pulumi.getter(name="clusterOs")
    def cluster_os(self) -> str:
        """
        Operating system of the cluster.
        """
        return pulumi.get(self, "cluster_os")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> str:
        """
        Version of the cluster.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> str:
        """
        (**Deprecated**) It has been deprecated from version 1.18.1. Container runtime of the cluster.
        """
        return pulumi.get(self, "container_runtime")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> bool:
        """
        Indicates whether cluster deletion protection is enabled.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain name for access.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="eniSubnetIds")
    def eni_subnet_ids(self) -> Sequence[str]:
        """
        Subnet IDs for cluster with VPC-CNI network mode.
        """
        return pulumi.get(self, "eni_subnet_ids")

    @property
    @pulumi.getter(name="ignoreClusterCidrConflict")
    def ignore_cluster_cidr_conflict(self) -> bool:
        """
        Indicates whether to ignore the cluster cidr conflict error.
        """
        return pulumi.get(self, "ignore_cluster_cidr_conflict")

    @property
    @pulumi.getter(name="isNonStaticIpMode")
    def is_non_static_ip_mode(self) -> bool:
        """
        Indicates whether non-static ip mode is enabled.
        """
        return pulumi.get(self, "is_non_static_ip_mode")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> str:
        """
        Kubernetes config.
        """
        return pulumi.get(self, "kube_config")

    @property
    @pulumi.getter(name="kubeConfigIntranet")
    def kube_config_intranet(self) -> str:
        """
        Kubernetes config of private network.
        """
        return pulumi.get(self, "kube_config_intranet")

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> str:
        """
        Cluster kube-proxy mode.
        """
        return pulumi.get(self, "kube_proxy_mode")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        Cluster network type.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="nodeNameType")
    def node_name_type(self) -> str:
        """
        Node name type of cluster.
        """
        return pulumi.get(self, "node_name_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password of account.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pgwEndpoint")
    def pgw_endpoint(self) -> str:
        """
        The Intranet address used for access.
        """
        return pulumi.get(self, "pgw_endpoint")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID of the cluster.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Sequence[str]:
        """
        Access policy.
        """
        return pulumi.get(self, "security_policies")

    @property
    @pulumi.getter(name="serviceCidr")
    def service_cidr(self) -> str:
        """
        The network address block of the cluster.
        """
        return pulumi.get(self, "service_cidr")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User name of account.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Vpc ID of the cluster.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="workerInstancesLists")
    def worker_instances_lists(self) -> Sequence['outputs.GetClustersListWorkerInstancesListResult']:
        """
        An information list of cvm within the WORKER clusters. Each element contains the following attributes.
        """
        return pulumi.get(self, "worker_instances_lists")


@pulumi.output_type
class GetClustersListClusterExtraArgResult(dict):
    def __init__(__self__, *,
                 kube_apiservers: Sequence[str],
                 kube_controller_managers: Sequence[str],
                 kube_schedulers: Sequence[str]):
        """
        :param Sequence[str] kube_apiservers: The customized parameters for kube-apiserver.
        :param Sequence[str] kube_controller_managers: The customized parameters for kube-controller-manager.
        :param Sequence[str] kube_schedulers: The customized parameters for kube-scheduler.
        """
        pulumi.set(__self__, "kube_apiservers", kube_apiservers)
        pulumi.set(__self__, "kube_controller_managers", kube_controller_managers)
        pulumi.set(__self__, "kube_schedulers", kube_schedulers)

    @property
    @pulumi.getter(name="kubeApiservers")
    def kube_apiservers(self) -> Sequence[str]:
        """
        The customized parameters for kube-apiserver.
        """
        return pulumi.get(self, "kube_apiservers")

    @property
    @pulumi.getter(name="kubeControllerManagers")
    def kube_controller_managers(self) -> Sequence[str]:
        """
        The customized parameters for kube-controller-manager.
        """
        return pulumi.get(self, "kube_controller_managers")

    @property
    @pulumi.getter(name="kubeSchedulers")
    def kube_schedulers(self) -> Sequence[str]:
        """
        The customized parameters for kube-scheduler.
        """
        return pulumi.get(self, "kube_schedulers")


@pulumi.output_type
class GetClustersListWorkerInstancesListResult(dict):
    def __init__(__self__, *,
                 failed_reason: str,
                 instance_id: str,
                 instance_role: str,
                 instance_state: str,
                 lan_ip: str):
        """
        :param str failed_reason: Information of the cvm when it is failed.
        :param str instance_id: ID of the cvm.
        :param str instance_role: Role of the cvm.
        :param str instance_state: State of the cvm.
        :param str lan_ip: LAN IP of the cvm.
        """
        pulumi.set(__self__, "failed_reason", failed_reason)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_role", instance_role)
        pulumi.set(__self__, "instance_state", instance_state)
        pulumi.set(__self__, "lan_ip", lan_ip)

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> str:
        """
        Information of the cvm when it is failed.
        """
        return pulumi.get(self, "failed_reason")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the cvm.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> str:
        """
        Role of the cvm.
        """
        return pulumi.get(self, "instance_role")

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> str:
        """
        State of the cvm.
        """
        return pulumi.get(self, "instance_state")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> str:
        """
        LAN IP of the cvm.
        """
        return pulumi.get(self, "lan_ip")


