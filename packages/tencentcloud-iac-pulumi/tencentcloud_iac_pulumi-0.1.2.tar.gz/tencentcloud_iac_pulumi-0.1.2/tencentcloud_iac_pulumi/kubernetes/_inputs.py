# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AsScalingGroupAutoScalingConfigArgs',
    'AsScalingGroupAutoScalingConfigDataDiskArgs',
    'AsScalingGroupAutoScalingGroupArgs',
    'AsScalingGroupAutoScalingGroupForwardBalancerIdArgs',
    'AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttributeArgs',
    'ClusterAttachmentWorkerConfigArgs',
    'ClusterAttachmentWorkerConfigDataDiskArgs',
    'ClusterAttachmentWorkerConfigOverridesArgs',
    'ClusterAttachmentWorkerConfigOverridesDataDiskArgs',
    'ClusterAuthOptionsArgs',
    'ClusterClusterAuditArgs',
    'ClusterClusterExtraArgsArgs',
    'ClusterEventPersistenceArgs',
    'ClusterExistInstanceArgs',
    'ClusterExistInstanceInstancesParaArgs',
    'ClusterExtensionAddonArgs',
    'ClusterLogAgentArgs',
    'ClusterMasterConfigArgs',
    'ClusterMasterConfigDataDiskArgs',
    'ClusterNodePoolGlobalConfigArgs',
    'ClusterWorkerConfigArgs',
    'ClusterWorkerConfigDataDiskArgs',
    'ClusterWorkerInstancesListArgs',
    'NodePoolAutoScalingConfigArgs',
    'NodePoolAutoScalingConfigDataDiskArgs',
    'NodePoolNodeConfigArgs',
    'NodePoolNodeConfigDataDiskArgs',
    'NodePoolTaintArgs',
    'ScaleWorkerDataDiskArgs',
    'ScaleWorkerWorkerConfigArgs',
    'ScaleWorkerWorkerConfigDataDiskArgs',
    'ScaleWorkerWorkerInstancesListArgs',
]

@pulumi.input_type
class AsScalingGroupAutoScalingConfigArgs:
    def __init__(__self__, *,
                 configuration_name: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingConfigDataDiskArgs']]]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 instance_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] configuration_name: Name of a launch configuration.
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[Mapping[str, Any]] instance_tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys.
        :param pulumi.Input[str] password: Password to access.
        :param pulumi.Input[int] project_id: Specifys to which project the configuration belongs.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        pulumi.set(__self__, "configuration_name", configuration_name)
        pulumi.set(__self__, "instance_type", instance_type)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if instance_tags is not None:
            pulumi.set(__self__, "instance_tags", instance_tags)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> pulumi.Input[str]:
        """
        Name of a launch configuration.
        """
        return pulumi.get(self, "configuration_name")

    @configuration_name.setter
    def configuration_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "instance_tags")

    @instance_tags.setter
    def instance_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "instance_tags", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifys to which project the configuration belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)


@pulumi.input_type
class AsScalingGroupAutoScalingConfigDataDiskArgs:
    def __init__(__self__, *,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class AsScalingGroupAutoScalingGroupArgs:
    def __init__(__self__, *,
                 max_size: pulumi.Input[int],
                 min_size: pulumi.Input[int],
                 scaling_group_name: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 forward_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdArgs']]]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] max_size: Maximum number of CVM instances (0~2000).
        :param pulumi.Input[int] min_size: Minimum number of CVM instances (0~2000).
        :param pulumi.Input[str] scaling_group_name: Name of a scaling group.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[int] default_cooldown: Default cooldown time in second, and default value is 300.
        :param pulumi.Input[int] desired_capacity: Desired volume of CVM instances, which is between max_size and min_size.
        :param pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdArgs']]] forward_balancer_ids: List of application load balancers, which can't be specified with load_balancer_ids together.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: ID list of traditional load balancers.
        :param pulumi.Input[int] project_id: Specifys to which project the scaling group belongs.
        :param pulumi.Input[str] retry_policy: Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of a scaling group.
        :param pulumi.Input[str] termination_policies: Available values for termination policies include `OLDEST_INSTANCE` and `NEWEST_INSTANCE`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of available zones, for Basic network it is required.
        """
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if default_cooldown is not None:
            pulumi.set(__self__, "default_cooldown", default_cooldown)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if forward_balancer_ids is not None:
            pulumi.set(__self__, "forward_balancer_ids", forward_balancer_ids)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termination_policies is not None:
            pulumi.set(__self__, "termination_policies", termination_policies)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Input[int]:
        """
        Maximum number of CVM instances (0~2000).
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Input[int]:
        """
        Minimum number of CVM instances (0~2000).
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> pulumi.Input[str]:
        """
        Name of a scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @scaling_group_name.setter
    def scaling_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "scaling_group_name", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        Default cooldown time in second, and default value is 300.
        """
        return pulumi.get(self, "default_cooldown")

    @default_cooldown.setter
    def default_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cooldown", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Desired volume of CVM instances, which is between max_size and min_size.
        """
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter(name="forwardBalancerIds")
    def forward_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdArgs']]]]:
        """
        List of application load balancers, which can't be specified with load_balancer_ids together.
        """
        return pulumi.get(self, "forward_balancer_ids")

    @forward_balancer_ids.setter
    def forward_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdArgs']]]]):
        pulumi.set(self, "forward_balancer_ids", value)

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of traditional load balancers.
        """
        return pulumi.get(self, "load_balancer_ids")

    @load_balancer_ids.setter
    def load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ids", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifys to which project the scaling group belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        """
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of a scaling group.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for termination policies include `OLDEST_INSTANCE` and `NEWEST_INSTANCE`.
        """
        return pulumi.get(self, "termination_policies")

    @termination_policies.setter
    def termination_policies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_policies", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class AsScalingGroupAutoScalingGroupForwardBalancerIdArgs:
    def __init__(__self__, *,
                 listener_id: pulumi.Input[str],
                 load_balancer_id: pulumi.Input[str],
                 target_attributes: pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttributeArgs']]],
                 rule_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] listener_id: Listener ID for application load balancers.
        :param pulumi.Input[str] load_balancer_id: ID of available load balancers.
        :param pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttributeArgs']]] target_attributes: Attribute list of target rules.
        :param pulumi.Input[str] rule_id: ID of forwarding rules.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "target_attributes", target_attributes)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[str]:
        """
        Listener ID for application load balancers.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Input[str]:
        """
        ID of available load balancers.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttributeArgs']]]:
        """
        Attribute list of target rules.
        """
        return pulumi.get(self, "target_attributes")

    @target_attributes.setter
    def target_attributes(self, value: pulumi.Input[Sequence[pulumi.Input['AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttributeArgs']]]):
        pulumi.set(self, "target_attributes", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of forwarding rules.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)


@pulumi.input_type
class AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttributeArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 weight: pulumi.Input[int]):
        """
        :param pulumi.Input[int] port: Port number.
        :param pulumi.Input[int] weight: Weight.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        Weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigArgs:
    def __init__(__self__, *,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_schedule: Optional[pulumi.Input[bool]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input[bool] is_schedule: Indicate to schedule the adding node or not. Default is true.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to schedule the adding node or not. Default is true.
        """
        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schedule", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigOverridesArgs:
    def __init__(__self__, *,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_schedule: Optional[pulumi.Input[bool]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input[bool] is_schedule: Indicate to schedule the adding node or not. Default is true.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to schedule the adding node or not. Default is true.
        """
        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schedule", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigOverridesDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ClusterAuthOptionsArgs:
    def __init__(__self__, *,
                 auto_create_discovery_anonymous_auth: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 jwks_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_create_discovery_anonymous_auth: If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
        :param pulumi.Input[str] issuer: Specify service-account-issuer.
        :param pulumi.Input[str] jwks_uri: Specify service-account-jwks-uri.
        """
        if auto_create_discovery_anonymous_auth is not None:
            pulumi.set(__self__, "auto_create_discovery_anonymous_auth", auto_create_discovery_anonymous_auth)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)

    @property
    @pulumi.getter(name="autoCreateDiscoveryAnonymousAuth")
    def auto_create_discovery_anonymous_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
        """
        return pulumi.get(self, "auto_create_discovery_anonymous_auth")

    @auto_create_discovery_anonymous_auth.setter
    def auto_create_discovery_anonymous_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_discovery_anonymous_auth", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        Specify service-account-issuer.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Specify service-account-jwks-uri.
        """
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwks_uri", value)


@pulumi.input_type
class ClusterClusterAuditArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
        :param pulumi.Input[str] log_set_id: Specify id of existing CLS log set, or auto create a new set by leave it empty.
        :param pulumi.Input[str] topic_id: Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        pulumi.set(__self__, "enabled", enabled)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log set, or auto create a new set by leave it empty.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class ClusterClusterExtraArgsArgs:
    def __init__(__self__, *,
                 kube_apiservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_controller_managers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_schedulers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_apiservers: The customized parameters for kube-apiserver.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_controller_managers: The customized parameters for kube-controller-manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_schedulers: The customized parameters for kube-scheduler.
        """
        if kube_apiservers is not None:
            pulumi.set(__self__, "kube_apiservers", kube_apiservers)
        if kube_controller_managers is not None:
            pulumi.set(__self__, "kube_controller_managers", kube_controller_managers)
        if kube_schedulers is not None:
            pulumi.set(__self__, "kube_schedulers", kube_schedulers)

    @property
    @pulumi.getter(name="kubeApiservers")
    def kube_apiservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The customized parameters for kube-apiserver.
        """
        return pulumi.get(self, "kube_apiservers")

    @kube_apiservers.setter
    def kube_apiservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_apiservers", value)

    @property
    @pulumi.getter(name="kubeControllerManagers")
    def kube_controller_managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The customized parameters for kube-controller-manager.
        """
        return pulumi.get(self, "kube_controller_managers")

    @kube_controller_managers.setter
    def kube_controller_managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_controller_managers", value)

    @property
    @pulumi.getter(name="kubeSchedulers")
    def kube_schedulers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The customized parameters for kube-scheduler.
        """
        return pulumi.get(self, "kube_schedulers")

    @kube_schedulers.setter
    def kube_schedulers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_schedulers", value)


@pulumi.input_type
class ClusterEventPersistenceArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Specify weather the Event Persistence enabled.
        :param pulumi.Input[str] log_set_id: Specify id of existing CLS log set, or auto create a new set by leave it empty.
        :param pulumi.Input[str] topic_id: Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        pulumi.set(__self__, "enabled", enabled)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Specify weather the Event Persistence enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log set, or auto create a new set by leave it empty.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class ClusterExistInstanceArgs:
    def __init__(__self__, *,
                 desired_pod_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 instances_para: Optional[pulumi.Input['ClusterExistInstanceInstancesParaArgs']] = None,
                 node_role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] desired_pod_numbers: Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
        :param pulumi.Input['ClusterExistInstanceInstancesParaArgs'] instances_para: Reinstallation parameters of an existing instance.
        :param pulumi.Input[str] node_role: Role of existed node. value:MASTER_ETCD or WORKER.
        """
        if desired_pod_numbers is not None:
            pulumi.set(__self__, "desired_pod_numbers", desired_pod_numbers)
        if instances_para is not None:
            pulumi.set(__self__, "instances_para", instances_para)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)

    @property
    @pulumi.getter(name="desiredPodNumbers")
    def desired_pod_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
        """
        return pulumi.get(self, "desired_pod_numbers")

    @desired_pod_numbers.setter
    def desired_pod_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "desired_pod_numbers", value)

    @property
    @pulumi.getter(name="instancesPara")
    def instances_para(self) -> Optional[pulumi.Input['ClusterExistInstanceInstancesParaArgs']]:
        """
        Reinstallation parameters of an existing instance.
        """
        return pulumi.get(self, "instances_para")

    @instances_para.setter
    def instances_para(self, value: Optional[pulumi.Input['ClusterExistInstanceInstancesParaArgs']]):
        pulumi.set(self, "instances_para", value)

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of existed node. value:MASTER_ETCD or WORKER.
        """
        return pulumi.get(self, "node_role")

    @node_role.setter
    def node_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_role", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaArgs:
    def __init__(__self__, *,
                 instance_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: Cluster IDs.
        """
        pulumi.set(__self__, "instance_ids", instance_ids)

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Cluster IDs.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_ids", value)


@pulumi.input_type
class ClusterExtensionAddonArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 param: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Add-on name.
        :param pulumi.Input[str] param: Description of the add-on resource object in JSON string format.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "param", param)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Add-on name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def param(self) -> pulumi.Input[str]:
        """
        Description of the add-on resource object in JSON string format.
        """
        return pulumi.get(self, "param")

    @param.setter
    def param(self, value: pulumi.Input[str]):
        pulumi.set(self, "param", value)


@pulumi.input_type
class ClusterLogAgentArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 kubelet_root_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether the log agent enabled.
        :param pulumi.Input[str] kubelet_root_dir: Kubelet root directory as the literal.
        """
        pulumi.set(__self__, "enabled", enabled)
        if kubelet_root_dir is not None:
            pulumi.set(__self__, "kubelet_root_dir", kubelet_root_dir)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the log agent enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kubeletRootDir")
    def kubelet_root_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Kubelet root directory as the literal.
        """
        return pulumi.get(self, "kubelet_root_dir")

    @kubelet_root_dir.setter
    def kubelet_root_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_root_dir", value)


@pulumi.input_type
class ClusterMasterConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[str]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 img_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[str] subnet_id: Private network ID.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[int] count: Number of cvm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param pulumi.Input[str] disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param pulumi.Input[str] img_id: The valid image id, format of img-xxx.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] instance_name: Name of the CVMs.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param pulumi.Input[str] key_ids: ID list of keys, should be set if `password` not set.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[pulumi.Input[str]]:
        """
        The valid image id, format of img-xxx.
        """
        return pulumi.get(self, "img_id")

    @img_id.setter
    def img_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterMasterConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[bool] encrypt: Indicates whether to encrypt data disk, default `false`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param pulumi.Input[str] mount_target: Mount target.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class ClusterNodePoolGlobalConfigArgs:
    def __init__(__self__, *,
                 expander: Optional[pulumi.Input[str]] = None,
                 ignore_daemon_sets_utilization: Optional[pulumi.Input[bool]] = None,
                 is_scale_in_enabled: Optional[pulumi.Input[bool]] = None,
                 max_concurrent_scale_in: Optional[pulumi.Input[int]] = None,
                 scale_in_delay: Optional[pulumi.Input[int]] = None,
                 scale_in_unneeded_time: Optional[pulumi.Input[int]] = None,
                 scale_in_utilization_threshold: Optional[pulumi.Input[int]] = None,
                 skip_nodes_with_local_storage: Optional[pulumi.Input[bool]] = None,
                 skip_nodes_with_system_pods: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] expander: Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
        :param pulumi.Input[bool] ignore_daemon_sets_utilization: Whether to ignore DaemonSet pods by default when calculating resource usage.
        :param pulumi.Input[bool] is_scale_in_enabled: Indicates whether to enable scale-in.
        :param pulumi.Input[int] max_concurrent_scale_in: Max concurrent scale-in volume.
        :param pulumi.Input[int] scale_in_delay: Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
        :param pulumi.Input[int] scale_in_unneeded_time: Number of consecutive minutes of idleness after which the node is subject to scale-in.
        :param pulumi.Input[int] scale_in_utilization_threshold: Percentage of node resource usage below which the node is considered to be idle.
        :param pulumi.Input[bool] skip_nodes_with_local_storage: During scale-in, ignore nodes with local storage pods.
        :param pulumi.Input[bool] skip_nodes_with_system_pods: During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
        """
        if expander is not None:
            pulumi.set(__self__, "expander", expander)
        if ignore_daemon_sets_utilization is not None:
            pulumi.set(__self__, "ignore_daemon_sets_utilization", ignore_daemon_sets_utilization)
        if is_scale_in_enabled is not None:
            pulumi.set(__self__, "is_scale_in_enabled", is_scale_in_enabled)
        if max_concurrent_scale_in is not None:
            pulumi.set(__self__, "max_concurrent_scale_in", max_concurrent_scale_in)
        if scale_in_delay is not None:
            pulumi.set(__self__, "scale_in_delay", scale_in_delay)
        if scale_in_unneeded_time is not None:
            pulumi.set(__self__, "scale_in_unneeded_time", scale_in_unneeded_time)
        if scale_in_utilization_threshold is not None:
            pulumi.set(__self__, "scale_in_utilization_threshold", scale_in_utilization_threshold)
        if skip_nodes_with_local_storage is not None:
            pulumi.set(__self__, "skip_nodes_with_local_storage", skip_nodes_with_local_storage)
        if skip_nodes_with_system_pods is not None:
            pulumi.set(__self__, "skip_nodes_with_system_pods", skip_nodes_with_system_pods)

    @property
    @pulumi.getter
    def expander(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
        """
        return pulumi.get(self, "expander")

    @expander.setter
    def expander(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expander", value)

    @property
    @pulumi.getter(name="ignoreDaemonSetsUtilization")
    def ignore_daemon_sets_utilization(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to ignore DaemonSet pods by default when calculating resource usage.
        """
        return pulumi.get(self, "ignore_daemon_sets_utilization")

    @ignore_daemon_sets_utilization.setter
    def ignore_daemon_sets_utilization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_daemon_sets_utilization", value)

    @property
    @pulumi.getter(name="isScaleInEnabled")
    def is_scale_in_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable scale-in.
        """
        return pulumi.get(self, "is_scale_in_enabled")

    @is_scale_in_enabled.setter
    def is_scale_in_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scale_in_enabled", value)

    @property
    @pulumi.getter(name="maxConcurrentScaleIn")
    def max_concurrent_scale_in(self) -> Optional[pulumi.Input[int]]:
        """
        Max concurrent scale-in volume.
        """
        return pulumi.get(self, "max_concurrent_scale_in")

    @max_concurrent_scale_in.setter
    def max_concurrent_scale_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_scale_in", value)

    @property
    @pulumi.getter(name="scaleInDelay")
    def scale_in_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
        """
        return pulumi.get(self, "scale_in_delay")

    @scale_in_delay.setter
    def scale_in_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_delay", value)

    @property
    @pulumi.getter(name="scaleInUnneededTime")
    def scale_in_unneeded_time(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive minutes of idleness after which the node is subject to scale-in.
        """
        return pulumi.get(self, "scale_in_unneeded_time")

    @scale_in_unneeded_time.setter
    def scale_in_unneeded_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_unneeded_time", value)

    @property
    @pulumi.getter(name="scaleInUtilizationThreshold")
    def scale_in_utilization_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage of node resource usage below which the node is considered to be idle.
        """
        return pulumi.get(self, "scale_in_utilization_threshold")

    @scale_in_utilization_threshold.setter
    def scale_in_utilization_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_utilization_threshold", value)

    @property
    @pulumi.getter(name="skipNodesWithLocalStorage")
    def skip_nodes_with_local_storage(self) -> Optional[pulumi.Input[bool]]:
        """
        During scale-in, ignore nodes with local storage pods.
        """
        return pulumi.get(self, "skip_nodes_with_local_storage")

    @skip_nodes_with_local_storage.setter
    def skip_nodes_with_local_storage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_nodes_with_local_storage", value)

    @property
    @pulumi.getter(name="skipNodesWithSystemPods")
    def skip_nodes_with_system_pods(self) -> Optional[pulumi.Input[bool]]:
        """
        During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
        """
        return pulumi.get(self, "skip_nodes_with_system_pods")

    @skip_nodes_with_system_pods.setter
    def skip_nodes_with_system_pods(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_nodes_with_system_pods", value)


@pulumi.input_type
class ClusterWorkerConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[str]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 img_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[str] subnet_id: Private network ID.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[int] count: Number of cvm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param pulumi.Input[str] disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param pulumi.Input[str] img_id: The valid image id, format of img-xxx.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] instance_name: Name of the CVMs.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param pulumi.Input[str] key_ids: ID list of keys, should be set if `password` not set.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[pulumi.Input[str]]:
        """
        The valid image id, format of img-xxx.
        """
        return pulumi.get(self, "img_id")

    @img_id.setter
    def img_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterWorkerConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[bool] encrypt: Indicates whether to encrypt data disk, default `false`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param pulumi.Input[str] mount_target: Mount target.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class ClusterWorkerInstancesListArgs:
    def __init__(__self__, *,
                 failed_reason: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_role: Optional[pulumi.Input[str]] = None,
                 instance_state: Optional[pulumi.Input[str]] = None,
                 lan_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] failed_reason: Information of the cvm when it is failed.
        :param pulumi.Input[str] instance_id: ID of the cvm.
        :param pulumi.Input[str] instance_role: Role of the cvm.
        :param pulumi.Input[str] instance_state: State of the cvm.
        :param pulumi.Input[str] lan_ip: LAN IP of the cvm.
        """
        if failed_reason is not None:
            pulumi.set(__self__, "failed_reason", failed_reason)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_role is not None:
            pulumi.set(__self__, "instance_role", instance_role)
        if instance_state is not None:
            pulumi.set(__self__, "instance_state", instance_state)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the cvm when it is failed.
        """
        return pulumi.get(self, "failed_reason")

    @failed_reason.setter
    def failed_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_reason", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cvm.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of the cvm.
        """
        return pulumi.get(self, "instance_role")

    @instance_role.setter
    def instance_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_role", value)

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the cvm.
        """
        return pulumi.get(self, "instance_state")

    @instance_state.setter
    def instance_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_state", value)

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[pulumi.Input[str]]:
        """
        LAN IP of the cvm.
        """
        return pulumi.get(self, "lan_ip")

    @lan_ip.setter
    def lan_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_ip", value)


@pulumi.input_type
class NodePoolAutoScalingConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 backup_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_instance_type: Optional[pulumi.Input[str]] = None,
                 spot_max_price: Optional[pulumi.Input[str]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_instance_types: Backup CVM instance types if specified instance type sold out or mismatch.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: Name of cam role.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] instance_charge_type: Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys.
        :param pulumi.Input[str] password: Password to access.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[str] spot_instance_type: Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] spot_max_price: Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        if backup_instance_types is not None:
            pulumi.set(__self__, "backup_instance_types", backup_instance_types)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)
        if spot_max_price is not None:
            pulumi.set(__self__, "spot_max_price", spot_max_price)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="backupInstanceTypes")
    def backup_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Backup CVM instance types if specified instance type sold out or mismatch.
        """
        return pulumi.get(self, "backup_instance_types")

    @backup_instance_types.setter
    def backup_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_instance_types", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of cam role.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_instance_type")

    @spot_instance_type.setter
    def spot_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_instance_type", value)

    @property
    @pulumi.getter(name="spotMaxPrice")
    def spot_max_price(self) -> Optional[pulumi.Input[str]]:
        """
        Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_max_price")

    @spot_max_price.setter
    def spot_max_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_max_price", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)


@pulumi.input_type
class NodePoolAutoScalingConfigDataDiskArgs:
    def __init__(__self__, *,
                 delete_with_instance: Optional[pulumi.Input[bool]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] delete_with_instance: Indicates whether the disk remove after instance terminated.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the disk remove after instance terminated.
        """
        return pulumi.get(self, "delete_with_instance")

    @delete_with_instance.setter
    def delete_with_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class NodePoolNodeConfigArgs:
    def __init__(__self__, *,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_schedule: Optional[pulumi.Input[bool]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input[bool] is_schedule: Indicate to schedule the adding node or not. Default is true.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to schedule the adding node or not. Default is true.
        """
        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schedule", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class NodePoolNodeConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class NodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] effect: Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        :param pulumi.Input[str] key: Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param pulumi.Input[str] value: Value of the taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ScaleWorkerDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ScaleWorkerWorkerConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[str]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 img_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[str] subnet_id: Private network ID.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[int] count: Number of cvm.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param pulumi.Input[str] disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param pulumi.Input[str] img_id: The valid image id, format of img-xxx.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] instance_name: Name of the CVMs.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param pulumi.Input[str] key_ids: ID list of keys, should be set if `password` not set.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[pulumi.Input[str]]:
        """
        The valid image id, format of img-xxx.
        """
        return pulumi.get(self, "img_id")

    @img_id.setter
    def img_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ScaleWorkerWorkerConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[bool] encrypt: Indicates whether to encrypt data disk, default `false`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param pulumi.Input[str] mount_target: Mount target.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class ScaleWorkerWorkerInstancesListArgs:
    def __init__(__self__, *,
                 failed_reason: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_role: Optional[pulumi.Input[str]] = None,
                 instance_state: Optional[pulumi.Input[str]] = None,
                 lan_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] failed_reason: Information of the cvm when it is failed.
        :param pulumi.Input[str] instance_id: ID of the cvm.
        :param pulumi.Input[str] instance_role: Role of the cvm.
        :param pulumi.Input[str] instance_state: State of the cvm.
        :param pulumi.Input[str] lan_ip: LAN IP of the cvm.
        """
        if failed_reason is not None:
            pulumi.set(__self__, "failed_reason", failed_reason)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_role is not None:
            pulumi.set(__self__, "instance_role", instance_role)
        if instance_state is not None:
            pulumi.set(__self__, "instance_state", instance_state)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the cvm when it is failed.
        """
        return pulumi.get(self, "failed_reason")

    @failed_reason.setter
    def failed_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_reason", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cvm.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of the cvm.
        """
        return pulumi.get(self, "instance_role")

    @instance_role.setter
    def instance_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_role", value)

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the cvm.
        """
        return pulumi.get(self, "instance_state")

    @instance_state.setter
    def instance_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_state", value)

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[pulumi.Input[str]]:
        """
        LAN IP of the cvm.
        """
        return pulumi.get(self, "lan_ip")

    @lan_ip.setter
    def lan_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_ip", value)


