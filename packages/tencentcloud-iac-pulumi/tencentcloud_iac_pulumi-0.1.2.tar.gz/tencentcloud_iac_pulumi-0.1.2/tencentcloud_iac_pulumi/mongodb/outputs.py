# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceStandbyInstanceList',
    'GetInstancesInstanceListResult',
    'GetZoneConfigListResult',
]

@pulumi.output_type
class InstanceStandbyInstanceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "standbyInstanceId":
            suggest = "standby_instance_id"
        elif key == "standbyInstanceRegion":
            suggest = "standby_instance_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStandbyInstanceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStandbyInstanceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStandbyInstanceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 standby_instance_id: Optional[str] = None,
                 standby_instance_region: Optional[str] = None):
        """
        :param str standby_instance_id: Indicates the ID of standby instance.
        :param str standby_instance_region: Indicates the region of standby instance.
        """
        if standby_instance_id is not None:
            pulumi.set(__self__, "standby_instance_id", standby_instance_id)
        if standby_instance_region is not None:
            pulumi.set(__self__, "standby_instance_region", standby_instance_region)

    @property
    @pulumi.getter(name="standbyInstanceId")
    def standby_instance_id(self) -> Optional[str]:
        """
        Indicates the ID of standby instance.
        """
        return pulumi.get(self, "standby_instance_id")

    @property
    @pulumi.getter(name="standbyInstanceRegion")
    def standby_instance_region(self) -> Optional[str]:
        """
        Indicates the region of standby instance.
        """
        return pulumi.get(self, "standby_instance_region")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 available_zone: str,
                 charge_type: str,
                 cluster_type: str,
                 cpu: int,
                 create_time: str,
                 engine_version: str,
                 instance_id: str,
                 instance_name: str,
                 machine_type: str,
                 memory: int,
                 project_id: int,
                 shard_quantity: int,
                 status: int,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 vip: str,
                 volume: int,
                 vpc_id: str,
                 vport: int):
        """
        :param int auto_renew_flag: Auto renew flag.
        :param str available_zone: The available zone of the Mongodb.
        :param str charge_type: The charge type of instance.
        :param str cluster_type: Type of Mongodb cluster, and available values include replica set cluster(expressed with `REPLSET`), sharding cluster(expressed with `SHARD`).
        :param int cpu: Number of cpu's core.
        :param str create_time: Creation time of the Mongodb instance.
        :param str engine_version: Version of the Mongodb engine.
        :param str instance_id: ID of the Mongodb instance to be queried.
        :param str instance_name: Name of the Mongodb instance.
        :param str machine_type: Type of Mongodb instance.
        :param int memory: Memory size.
        :param int project_id: ID of the project which the instance belongs.
        :param int shard_quantity: Number of sharding.
        :param int status: Status of the Mongodb, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        :param str subnet_id: ID of the subnet.
        :param Mapping[str, Any] tags: Tags of the Mongodb instance to be queried.
        :param str vip: IP of the Mongodb instance.
        :param int volume: Disk size.
        :param str vpc_id: ID of the VPC.
        :param int vport: IP port of the Mongodb instance.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "shard_quantity", shard_quantity)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "volume", volume)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        Auto renew flag.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> str:
        """
        The available zone of the Mongodb.
        """
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Type of Mongodb cluster, and available values include replica set cluster(expressed with `REPLSET`), sharding cluster(expressed with `SHARD`).
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Number of cpu's core.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the Mongodb instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        Version of the Mongodb engine.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the Mongodb instance to be queried.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Name of the Mongodb instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Type of Mongodb instance.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        ID of the project which the instance belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="shardQuantity")
    def shard_quantity(self) -> int:
        """
        Number of sharding.
        """
        return pulumi.get(self, "shard_quantity")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status of the Mongodb, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the Mongodb instance to be queried.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        IP of the Mongodb instance.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def volume(self) -> int:
        """
        Disk size.
        """
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        """
        IP port of the Mongodb instance.
        """
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 available_zone: str,
                 cluster_type: str,
                 cpu: int,
                 default_storage: int,
                 engine_version: str,
                 machine_type: str,
                 max_replicate_set_num: int,
                 max_storage: int,
                 memory: int,
                 min_replicate_set_num: int,
                 min_storage: int):
        """
        :param str available_zone: The available zone of the Mongodb.
        :param str cluster_type: Type of Mongodb cluster.
        :param int cpu: Number of cpu's core.
        :param int default_storage: Default disk size.
        :param str engine_version: Version of the Mongodb version.
        :param str machine_type: Type of Mongodb instance.
        :param int max_replicate_set_num: Maximum replicate set num for sharding cluster.
        :param int max_storage: Maximum size of the disk.
        :param int memory: Memory size.
        :param int min_replicate_set_num: Minimum replicate set num for sharding cluster.
        :param int min_storage: Minimum sie of the disk.
        """
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "default_storage", default_storage)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "max_replicate_set_num", max_replicate_set_num)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_replicate_set_num", min_replicate_set_num)
        pulumi.set(__self__, "min_storage", min_storage)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> str:
        """
        The available zone of the Mongodb.
        """
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Type of Mongodb cluster.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Number of cpu's core.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="defaultStorage")
    def default_storage(self) -> int:
        """
        Default disk size.
        """
        return pulumi.get(self, "default_storage")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        Version of the Mongodb version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Type of Mongodb instance.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="maxReplicateSetNum")
    def max_replicate_set_num(self) -> int:
        """
        Maximum replicate set num for sharding cluster.
        """
        return pulumi.get(self, "max_replicate_set_num")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        """
        Maximum size of the disk.
        """
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minReplicateSetNum")
    def min_replicate_set_num(self) -> int:
        """
        Minimum replicate set num for sharding cluster.
        """
        return pulumi.get(self, "min_replicate_set_num")

    @property
    @pulumi.getter(name="minStorage")
    def min_storage(self) -> int:
        """
        Minimum sie of the disk.
        """
        return pulumi.get(self, "min_storage")


