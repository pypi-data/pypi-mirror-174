# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 anycast_zone: Optional[pulumi.Input[str]] = None,
                 applicable_for_clb: Optional[pulumi.Input[bool]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 internet_service_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] anycast_zone: The zone of anycast. Valid value: `ANYCAST_ZONE_GLOBAL` and `ANYCAST_ZONE_OVERSEAS`.
        :param pulumi.Input[bool] applicable_for_clb: It has been deprecated from version 1.27.0. Indicates whether the anycast eip can be associated to a CLB.
        :param pulumi.Input[str] internet_charge_type: The charge type of eip. Valid value: `BANDWIDTH_PACKAGE`, `BANDWIDTH_POSTPAID_BY_HOUR` and `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: The bandwidth limit of EIP, unit is Mbps.
        :param pulumi.Input[str] internet_service_provider: Internet service provider of eip. Valid value: `BGP`, `CMCC`, `CTCC` and `CUCC`.
        :param pulumi.Input[str] name: The name of eip.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of eip.
        :param pulumi.Input[str] type: The type of eip. Valid value:  `EIP` and `AnycastEIP` and `HighQualityEIP`. Default is `EIP`.
        """
        if anycast_zone is not None:
            pulumi.set(__self__, "anycast_zone", anycast_zone)
        if applicable_for_clb is not None:
            warnings.warn("""It has been deprecated from version 1.27.0.""", DeprecationWarning)
            pulumi.log.warn("""applicable_for_clb is deprecated: It has been deprecated from version 1.27.0.""")
        if applicable_for_clb is not None:
            pulumi.set(__self__, "applicable_for_clb", applicable_for_clb)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if internet_service_provider is not None:
            pulumi.set(__self__, "internet_service_provider", internet_service_provider)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="anycastZone")
    def anycast_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone of anycast. Valid value: `ANYCAST_ZONE_GLOBAL` and `ANYCAST_ZONE_OVERSEAS`.
        """
        return pulumi.get(self, "anycast_zone")

    @anycast_zone.setter
    def anycast_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anycast_zone", value)

    @property
    @pulumi.getter(name="applicableForClb")
    def applicable_for_clb(self) -> Optional[pulumi.Input[bool]]:
        """
        It has been deprecated from version 1.27.0. Indicates whether the anycast eip can be associated to a CLB.
        """
        return pulumi.get(self, "applicable_for_clb")

    @applicable_for_clb.setter
    def applicable_for_clb(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "applicable_for_clb", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of eip. Valid value: `BANDWIDTH_PACKAGE`, `BANDWIDTH_POSTPAID_BY_HOUR` and `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        The bandwidth limit of EIP, unit is Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="internetServiceProvider")
    def internet_service_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Internet service provider of eip. Valid value: `BGP`, `CMCC`, `CTCC` and `CUCC`.
        """
        return pulumi.get(self, "internet_service_provider")

    @internet_service_provider.setter
    def internet_service_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_provider", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of eip.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of eip.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of eip. Valid value:  `EIP` and `AnycastEIP` and `HighQualityEIP`. Default is `EIP`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 anycast_zone: Optional[pulumi.Input[str]] = None,
                 applicable_for_clb: Optional[pulumi.Input[bool]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 internet_service_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] anycast_zone: The zone of anycast. Valid value: `ANYCAST_ZONE_GLOBAL` and `ANYCAST_ZONE_OVERSEAS`.
        :param pulumi.Input[bool] applicable_for_clb: It has been deprecated from version 1.27.0. Indicates whether the anycast eip can be associated to a CLB.
        :param pulumi.Input[str] internet_charge_type: The charge type of eip. Valid value: `BANDWIDTH_PACKAGE`, `BANDWIDTH_POSTPAID_BY_HOUR` and `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: The bandwidth limit of EIP, unit is Mbps.
        :param pulumi.Input[str] internet_service_provider: Internet service provider of eip. Valid value: `BGP`, `CMCC`, `CTCC` and `CUCC`.
        :param pulumi.Input[str] name: The name of eip.
        :param pulumi.Input[str] public_ip: The elastic IP address.
        :param pulumi.Input[str] status: The EIP current status.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of eip.
        :param pulumi.Input[str] type: The type of eip. Valid value:  `EIP` and `AnycastEIP` and `HighQualityEIP`. Default is `EIP`.
        """
        if anycast_zone is not None:
            pulumi.set(__self__, "anycast_zone", anycast_zone)
        if applicable_for_clb is not None:
            warnings.warn("""It has been deprecated from version 1.27.0.""", DeprecationWarning)
            pulumi.log.warn("""applicable_for_clb is deprecated: It has been deprecated from version 1.27.0.""")
        if applicable_for_clb is not None:
            pulumi.set(__self__, "applicable_for_clb", applicable_for_clb)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if internet_service_provider is not None:
            pulumi.set(__self__, "internet_service_provider", internet_service_provider)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="anycastZone")
    def anycast_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone of anycast. Valid value: `ANYCAST_ZONE_GLOBAL` and `ANYCAST_ZONE_OVERSEAS`.
        """
        return pulumi.get(self, "anycast_zone")

    @anycast_zone.setter
    def anycast_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anycast_zone", value)

    @property
    @pulumi.getter(name="applicableForClb")
    def applicable_for_clb(self) -> Optional[pulumi.Input[bool]]:
        """
        It has been deprecated from version 1.27.0. Indicates whether the anycast eip can be associated to a CLB.
        """
        return pulumi.get(self, "applicable_for_clb")

    @applicable_for_clb.setter
    def applicable_for_clb(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "applicable_for_clb", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of eip. Valid value: `BANDWIDTH_PACKAGE`, `BANDWIDTH_POSTPAID_BY_HOUR` and `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        The bandwidth limit of EIP, unit is Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="internetServiceProvider")
    def internet_service_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Internet service provider of eip. Valid value: `BGP`, `CMCC`, `CTCC` and `CUCC`.
        """
        return pulumi.get(self, "internet_service_provider")

    @internet_service_provider.setter
    def internet_service_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_provider", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of eip.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The elastic IP address.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The EIP current status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of eip.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of eip. Valid value:  `EIP` and `AnycastEIP` and `HighQualityEIP`. Default is `EIP`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anycast_zone: Optional[pulumi.Input[str]] = None,
                 applicable_for_clb: Optional[pulumi.Input[bool]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 internet_service_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an EIP resource.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.eip.Instance("foo")
        ```

        ## Import

        EIP can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Eip/instance:Instance foo eip-nyvf60va
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anycast_zone: The zone of anycast. Valid value: `ANYCAST_ZONE_GLOBAL` and `ANYCAST_ZONE_OVERSEAS`.
        :param pulumi.Input[bool] applicable_for_clb: It has been deprecated from version 1.27.0. Indicates whether the anycast eip can be associated to a CLB.
        :param pulumi.Input[str] internet_charge_type: The charge type of eip. Valid value: `BANDWIDTH_PACKAGE`, `BANDWIDTH_POSTPAID_BY_HOUR` and `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: The bandwidth limit of EIP, unit is Mbps.
        :param pulumi.Input[str] internet_service_provider: Internet service provider of eip. Valid value: `BGP`, `CMCC`, `CTCC` and `CUCC`.
        :param pulumi.Input[str] name: The name of eip.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of eip.
        :param pulumi.Input[str] type: The type of eip. Valid value:  `EIP` and `AnycastEIP` and `HighQualityEIP`. Default is `EIP`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an EIP resource.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.eip.Instance("foo")
        ```

        ## Import

        EIP can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Eip/instance:Instance foo eip-nyvf60va
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anycast_zone: Optional[pulumi.Input[str]] = None,
                 applicable_for_clb: Optional[pulumi.Input[bool]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 internet_service_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["anycast_zone"] = anycast_zone
            if applicable_for_clb is not None and not opts.urn:
                warnings.warn("""It has been deprecated from version 1.27.0.""", DeprecationWarning)
                pulumi.log.warn("""applicable_for_clb is deprecated: It has been deprecated from version 1.27.0.""")
            __props__.__dict__["applicable_for_clb"] = applicable_for_clb
            __props__.__dict__["internet_charge_type"] = internet_charge_type
            __props__.__dict__["internet_max_bandwidth_out"] = internet_max_bandwidth_out
            __props__.__dict__["internet_service_provider"] = internet_service_provider
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["status"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Eip/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anycast_zone: Optional[pulumi.Input[str]] = None,
            applicable_for_clb: Optional[pulumi.Input[bool]] = None,
            internet_charge_type: Optional[pulumi.Input[str]] = None,
            internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
            internet_service_provider: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            public_ip: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anycast_zone: The zone of anycast. Valid value: `ANYCAST_ZONE_GLOBAL` and `ANYCAST_ZONE_OVERSEAS`.
        :param pulumi.Input[bool] applicable_for_clb: It has been deprecated from version 1.27.0. Indicates whether the anycast eip can be associated to a CLB.
        :param pulumi.Input[str] internet_charge_type: The charge type of eip. Valid value: `BANDWIDTH_PACKAGE`, `BANDWIDTH_POSTPAID_BY_HOUR` and `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: The bandwidth limit of EIP, unit is Mbps.
        :param pulumi.Input[str] internet_service_provider: Internet service provider of eip. Valid value: `BGP`, `CMCC`, `CTCC` and `CUCC`.
        :param pulumi.Input[str] name: The name of eip.
        :param pulumi.Input[str] public_ip: The elastic IP address.
        :param pulumi.Input[str] status: The EIP current status.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of eip.
        :param pulumi.Input[str] type: The type of eip. Valid value:  `EIP` and `AnycastEIP` and `HighQualityEIP`. Default is `EIP`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["anycast_zone"] = anycast_zone
        __props__.__dict__["applicable_for_clb"] = applicable_for_clb
        __props__.__dict__["internet_charge_type"] = internet_charge_type
        __props__.__dict__["internet_max_bandwidth_out"] = internet_max_bandwidth_out
        __props__.__dict__["internet_service_provider"] = internet_service_provider
        __props__.__dict__["name"] = name
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anycastZone")
    def anycast_zone(self) -> pulumi.Output[Optional[str]]:
        """
        The zone of anycast. Valid value: `ANYCAST_ZONE_GLOBAL` and `ANYCAST_ZONE_OVERSEAS`.
        """
        return pulumi.get(self, "anycast_zone")

    @property
    @pulumi.getter(name="applicableForClb")
    def applicable_for_clb(self) -> pulumi.Output[Optional[bool]]:
        """
        It has been deprecated from version 1.27.0. Indicates whether the anycast eip can be associated to a CLB.
        """
        return pulumi.get(self, "applicable_for_clb")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        The charge type of eip. Valid value: `BANDWIDTH_PACKAGE`, `BANDWIDTH_POSTPAID_BY_HOUR` and `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> pulumi.Output[Optional[int]]:
        """
        The bandwidth limit of EIP, unit is Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="internetServiceProvider")
    def internet_service_provider(self) -> pulumi.Output[Optional[str]]:
        """
        Internet service provider of eip. Valid value: `BGP`, `CMCC`, `CTCC` and `CUCC`.
        """
        return pulumi.get(self, "internet_service_provider")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of eip.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[str]:
        """
        The elastic IP address.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The EIP current status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The tags of eip.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of eip. Valid value:  `EIP` and `AnycastEIP` and `HighQualityEIP`. Default is `EIP`.
        """
        return pulumi.get(self, "type")

