# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceContainer',
    'InstanceContainerEnv',
    'InstanceContainerPublishPort',
    'InstanceContainerVolume',
    'InstanceLoginConfiguration',
]

@pulumi.output_type
class InstanceContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerImage":
            suggest = "container_image"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "publishPorts":
            suggest = "publish_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command: Optional[str] = None,
                 container_image: Optional[str] = None,
                 container_name: Optional[str] = None,
                 envs: Optional[Sequence['outputs.InstanceContainerEnv']] = None,
                 publish_ports: Optional[Sequence['outputs.InstanceContainerPublishPort']] = None,
                 volumes: Optional[Sequence['outputs.InstanceContainerVolume']] = None):
        """
        :param str command: The command to run.
        :param str container_image: Container image address.
        :param str container_name: Container name.
        :param Sequence['InstanceContainerEnvArgs'] envs: List of environment variables.
        :param Sequence['InstanceContainerPublishPortArgs'] publish_ports: List of mappings of container ports and host ports.
        :param Sequence['InstanceContainerVolumeArgs'] volumes: List of container mount volumes.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)
        if container_image is not None:
            pulumi.set(__self__, "container_image", container_image)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if publish_ports is not None:
            pulumi.set(__self__, "publish_ports", publish_ports)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        """
        The command to run.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> Optional[str]:
        """
        Container image address.
        """
        return pulumi.get(self, "container_image")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.InstanceContainerEnv']]:
        """
        List of environment variables.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="publishPorts")
    def publish_ports(self) -> Optional[Sequence['outputs.InstanceContainerPublishPort']]:
        """
        List of mappings of container ports and host ports.
        """
        return pulumi.get(self, "publish_ports")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.InstanceContainerVolume']]:
        """
        List of container mount volumes.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class InstanceContainerEnv(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Environment variable key.
        :param str value: Environment variable value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Environment variable key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Environment variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstanceContainerPublishPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"
        elif key == "hostPort":
            suggest = "host_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainerPublishPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainerPublishPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainerPublishPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: int,
                 host_port: int,
                 ip: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param int container_port: Container port.
        :param int host_port: Host port.
        :param str ip: External IP. It defaults to 0.0.0.0.
        :param str protocol: The protocol defaults to tcp. Valid values: tcp, udp and sctp.
        """
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "host_port", host_port)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        """
        Container port.
        """
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> int:
        """
        Host port.
        """
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        External IP. It defaults to 0.0.0.0.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol defaults to tcp. Valid values: tcp, udp and sctp.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class InstanceContainerVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPath":
            suggest = "container_path"
        elif key == "hostPath":
            suggest = "host_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainerVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainerVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainerVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_path: str,
                 host_path: str):
        """
        :param str container_path: Container path.
        :param str host_path: Host path.
        """
        pulumi.set(__self__, "container_path", container_path)
        pulumi.set(__self__, "host_path", host_path)

    @property
    @pulumi.getter(name="containerPath")
    def container_path(self) -> str:
        """
        Container path.
        """
        return pulumi.get(self, "container_path")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> str:
        """
        Host path.
        """
        return pulumi.get(self, "host_path")


@pulumi.output_type
class InstanceLoginConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoGeneratePassword":
            suggest = "auto_generate_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLoginConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLoginConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLoginConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_generate_password: str,
                 password: Optional[str] = None):
        """
        :param str auto_generate_password: whether auto generate password. if false, need set password.
        :param str password: Login password.
        """
        pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> str:
        """
        whether auto generate password. if false, need set password.
        """
        return pulumi.get(self, "auto_generate_password")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Login password.
        """
        return pulumi.get(self, "password")


