{"version":3,"file":"asanaFieldView.js","names":["AsanaInlineEditorView","RB","InlineEditorView","extend","initialize","options","_","defaults","hasRawValue","formatResult","value","name","htmlEncode","getFieldValue","editor","selectize","$field","selected","getValue","JSON","stringify","map","key","pick","isFieldDirty","initialValue","setFieldValue","prototype","call","createField","$","setupEvents","on","_scheduleUpdateDirtyState","bind","showEditor","focusOnOpen","focus","ReviewRequestFields","AsanaFieldView","TextFieldView","autocomplete","multiline","useEditIconOnly","taskTemplate","template","_formatField","fieldName","jsonFieldName","fieldID","opts","useExtraData","tasks","parse","model","getDraftField","_renderValue","lis","task","completed","workspaceId","workspace_id","taskId","gid","taskSummary","tagName","$el","html","join","_getInlineEditorClass","_buildAutoComplete","reviewRequest","get","localSite","reviewRequestId","url","SITE_ROOT","inlineEditorView","data","forEach","undefined","String","id","copyClassesToDropdown","dropdownParent","labelField","valueField","multiple","items","optgroupLabelField","searchField","sortField","render","option","escape","load","query","callback","params","param","q","ajax","type","error","success","res","clearOptionGroups","i","length","group","addOptionGroup","workspace","j","optgroup","notesLines","notes","split","splice","push","refreshOptions"],"sources":["../../../../../../rbintegrations/static/js/asana/asanaFieldView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * An inline editor view for selecting Asana tasks.\n */\nconst AsanaInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        options = _.defaults(options, {\n            hasRawValue: true,\n            formatResult: value => {\n                if (value && value.name) {\n                    return value.name.htmlEncode();\n                } else {\n                    return '';\n                }\n            },\n            getFieldValue: editor => {\n                const selectize = this.$field[0].selectize;\n                const selected = selectize.getValue();\n\n                return JSON.stringify(selected.map(\n                    key => _.pick(\n                        selectize.options[key],\n                        ['completed', 'gid', 'workspace_id', 'name'])));\n            },\n            isFieldDirty: (editor, initialValue) => {\n                const value = editor.getValue();\n                return initialValue !== value;\n            },\n            setFieldValue: (editor, value) => {\n                // This is a no-op, since we do this in the $.selectize call.\n            },\n        });\n\n        RB.InlineEditorView.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        return $('<select multiple class=\"asana-field\">');\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        RB.InlineEditorView.prototype.setupEvents.call(this);\n\n        this.$field.on('change', this._scheduleUpdateDirtyState.bind(this));\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for showing the editor.\n     */\n    showEditor(options={}) {\n        RB.InlineEditorView.prototype.showEditor.call(this, options);\n\n        if (this.options.focusOnOpen) {\n            this.$field[0].selectize.focus();\n        }\n    },\n});\n\n\n/**\n * A review request field view for selecting Asana tasks.\n */\nRB.ReviewRequestFields.AsanaFieldView =\n    RB.ReviewRequestFields.TextFieldView.extend({\n    autocomplete: {},\n    multiline: true,\n    useEditIconOnly: true,\n\n    taskTemplate: _.template(dedent`\n        <<%- tagName %> class=\"asana-task<% if (completed) { %> completed<% } %>\">\n         <a href=\"https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/\">\n          <div class=\"asana-task-checkbox\">\n           <svg viewBox=\"0 0 32 32\">'\n            <polygon points=\"27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615\"></polygon>\n           </svg>\n          </div>\n          <span><%- taskSummary %></span>\n         </a>\n        </<%- tagName %>>\n        `),\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const fieldName = this.jsonFieldName || this.fieldID;\n        const opts = { useExtraData: this.useExtraData };\n        const tasks = JSON.parse(this.model.getDraftField(fieldName, opts));\n        this._renderValue(tasks);\n    },\n\n    /**\n     * Render the current value of the field.\n     *\n     * Args:\n     *     tasks (Array of object):\n     *         The current value of the field.\n     */\n    _renderValue(tasks) {\n        const lis = tasks.map(task => this.taskTemplate({\n            completed: task.completed,\n            workspaceId: task.workspace_id,\n            taskId: task.gid,\n            taskSummary: task.name,\n            tagName: 'li',\n        }));\n\n        this.$el.html(`<ul>${lis.join('')}</ul>`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return AsanaInlineEditorView;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const reviewRequest = this.model.get('reviewRequest');\n        const localSite = reviewRequest.get('localSitePrefix');\n        const reviewRequestId = reviewRequest.get('id');\n        const url = `${SITE_ROOT}rbintegrations/asana/${localSite}task-search/${reviewRequestId}/`;\n        const $field = this.inlineEditorView.$field;\n        const tasks = this.$el.data('raw-value');\n\n        tasks.forEach(task => {\n            if (task.gid === undefined) {\n                task.gid = String(task.id);\n            }\n        });\n\n        this._renderValue(tasks || []);\n\n        $field.selectize({\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            labelField: 'name',\n            valueField: 'gid',\n            multiple: true,\n            options: tasks,\n            items: tasks.map(task => task.gid),\n            optgroupLabelField: 'workspace',\n            searchField: 'name',\n            sortField: [\n                { 'field': 'completed' },\n                { 'field': 'name' },\n            ],\n            render: {\n                option: (data, escape) => {\n                    return this.taskTemplate({\n                        completed: data.completed,\n                        workspaceId: data.workspace_id,\n                        taskId: data.gid,\n                        taskSummary: data.name,\n                        tagName: 'div',\n                    });\n                }\n            },\n            load(query, callback) {\n                const params = $.param({ q: query });\n\n                $.ajax({\n                    url: `${url}?${params}`,\n                    type: 'GET',\n                    error: callback.bind(this),\n                    success: res => {\n                        const items = [];\n\n                        this.clearOptionGroups();\n\n                        for (let i = 0; i < res.length; i++) {\n                            const group = res[i];\n                            this.addOptionGroup(group.workspace, group);\n\n                            for (let j = 0; j < group.tasks.length; j++) {\n                                const task = group.tasks[j];\n                                task.optgroup = group.workspace;\n                                task.workspace_id = group.workspace_id;\n\n                                const notesLines = task.notes.split('\\n');\n                                task.notes = notesLines.splice(8).join('\\n');\n\n                                items.push(task);\n                            }\n                        }\n\n                        this.refreshOptions();\n                        callback(items);\n                    },\n                });\n            },\n        });\n    },\n});\n\n\n})();\n"],"mappings":"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"}