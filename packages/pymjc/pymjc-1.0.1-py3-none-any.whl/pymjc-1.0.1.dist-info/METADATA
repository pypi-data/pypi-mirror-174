Metadata-Version: 2.1
Name: pymjc
Version: 1.0.1
Summary: Minimum Jump Cost dissimilarity measure in Python
Project-URL: Homepage, https://github.com/nup002/pymjc
Project-URL: Bug Tracker, https://github.com/nup002/pymjc/issues
Author-email: Magne Eik Lauritzen <mag.lauritzen@gmail.com>
License: MIT License
        
        Copyright (c) 2O22 Magne Lauritzen
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Keywords: data science,dissimilarity measure
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.6
Requires-Dist: matplotlib
Requires-Dist: numpy>=1.20
Description-Content-Type: text/markdown

![LICENCE](https://img.shields.io/github/license/nup002/pymjc)
[![Flake8](https://github.com/nup002/pymjc/actions/workflows/flake8.yml/badge.svg)](https://github.com/nup002/mjc/actions/workflows/flake8.yml)
[![PyTest](https://github.com/nup002/pymjc/actions/workflows/PyTest.yml/badge.svg)](https://github.com/nup002/mjc/actions/workflows/PyTest.yml)
![Version](https://img.shields.io/pypi/v/pymjc)
![Python](https://img.shields.io/pypi/pyversions/pymjc)
# Minimum Jump Cost dissimilarity measure in Python

This python library implements the Minimum Jump Cost (MJC) dissimilarity measure devised by Joan Serra and Josep Lluis 
Arcos in 2012. The MJC dissimilarity measure was shown to outperform the Dynamic Time Warp (DTW) dissimilarity measure 
on several datasets. You can read their paper here: 
https://www.iiia.csic.es/sites/default/files/4584.pdf.

This library can compute the MJC for timeseries with different sampling rates, arbitrarily spaced data points, and 
non-overlapping regions.

## How to install
`pymjc` is available from PyPi. Run the following in a command line terminal:<br>
``` pip install pymjc```

## How to use
Example: 
```
from pymjc import mjc
import numpy as np

series_1 = np.array([1,2,3,2,1])
series_2 = np.array([0,1,2,1,0])

d_xy, abandoned = mjc(series_1, series_2, show_plot=True)

print(f"The MJC dissimilarity of series 1 and series 2 is {d_xy}")
```
There are some options for reducing the computational load of this algorithm. They are detailed in the next section.

## More detailed information
The time series s1 and s2 are specified as follows:
- They may be python Lists or numpy.ndarrays
- They may be of different length.
- They may or may not have time information.
- If one of the time series has time information, the other must also have it.
- Their datatype may be floats or integers.

A time series with no time information is just a list of values. The first element of the list corresponds to
the earliest point in the time series.<br>
Example: `s1 = [d₀, d₁, d₂, ...]`, where `dᵢ` is the i-th value of the time series.

A time series with time information must be a 2D array of shape (2, n). The data at index 0 are time
data, and the data at index 1 is amplitude data.<br>
Example: `s1 = [[t₀, t₁, t₂, ...], [d₀, d₁, d₂, ...]]`, where `tᵢ` is the time of the i-th measurement. The time 
values may be integers or floats, and need not begin at 0.

To visualize the algorithm, you may pass the variable `show_plot=True`. This will generate a plot with the two time
series, and arrows signifying the jumps that the algorithm made when calculating the Minimum Jump Cost.

To stop the algorithm early, pass a value for `dxy_limit`. If the dissimilarity measure exceeds this value during 
computation, it is abandoned.


### Performance
The time series are cast to numpy arrays. The checking and casting lowers execution speed. Therefore, an option to
disable this checking and casting has been implemented. If you are certain that the time series `s1` and `s2`
are `numpy.ndarray`s of the format `[[time data],[amplitude data]]`, you may pass the variable `override_checks=True`.

The algorithm locates the overlapping region between the two timeseries. This step is skipped if the first and last
timestamps are equal between the two timeseries. If your data has no time data, it is skipped if there is the same
number of samples in each timeseries.

As part of the calculation of the MJC, the algorithm calculates the standard deviations of the amplitude data, and
the average sampling periods of `s1` and `s2`. This lowers execution speed, but is required.
However, if you know the standard deviations and/or the average time difference between data points of either
(or both) `s1` and `s2` a-priori, you may pass these as variables. They are named `std_s1`, `std_s2`, `tavg_s1`, and
`tavg_s2`. Any number of these may be passed. The ones which are not passed will be calculated.

mjc() input parameters:
```
s1              : numpy ndarray | List. Time series 1.
s2              : numpy ndarray | List. Time series 2.
dxy_limit       : Optional float. Early abandoning variable.
beta            : Optional float. Time jump cost. 
show_plot       : Optional bool. If True, displays a plot that visualize the algorithms jump path. Default False.
std_s1          : Optional float. Standard deviation of time series s1.
std_s2          : Optional float. Standard deviation of time series s2.
tavg_s1         : Optional float. Average sampling period of time series 1.
tavg_s2         : Optional float. Average sampling period of time series 2. 
return_args     : Optional bool. If True, returns the values for std_s1, std_s2, tavg_s1, tavg_s2, s1, and s2.
override_checks : Optional bool. Override checking and casting
```
