from vkbottle.rule import FromMe
from vkbottle.user import Blueprint, Message

from idm_lp import const
from idm_lp.database import Database
from idm_lp.logger import logger_decorator
from idm_lp.utils import edit_message

user = Blueprint(
    name='auto_infection_blueprint'
)


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> +–∞–≤—Ç–æ–∑–∞—Ä–∞–∂–µ–Ω–∏–µ")
@logger_decorator
async def activate_auto_infection_wrapper(message: Message, **kwargs):
    with Database.get_current() as db:
        db.auto_infection = True
    await edit_message(
        message,
        "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ"
    )


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> -–∞–≤—Ç–æ–∑–∞—Ä–∞–∂–µ–Ω–∏–µ")
@logger_decorator
async def deactivate_auto_infection_wrapper(message: Message, **kwargs):
    with Database.get_current() as db:
        db.auto_infection = False
    await edit_message(
        message,
        "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"
    )


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> –∞–≤—Ç–æ–∑–∞—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª <interval:int>")
@logger_decorator
async def set_auto_infection_interval_wrapper(message: Message, interval: int, **kwargs):
    db = Database.get_current()
    if interval < 60:
        await edit_message(
            message,
            "‚ö† –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã"
        )
        return

    db.auto_infection_interval = interval
    db.save()
    await edit_message(
        message,
        f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —Å–µ–∫."
    )


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> –∞–≤—Ç–æ–∑–∞—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç <argument>")
@logger_decorator
async def set_auto_infection_argument_wrapper(message: Message, argument: str, **kwargs):
    db = Database.get_current()
    db.auto_infection_argument = argument
    db.save()
    await edit_message(
        message,
        "‚úÖ –ê—Ä–≥—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω"
    )


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> –∞–≤—Ç–æ–∑–∞—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç")
@logger_decorator
async def set_auto_infection_chat_wrapper(message: Message, **kwargs):
    db = Database.get_current()
    db.auto_infection_peer_id = message.peer_id
    db.save()
    await edit_message(
        message,
        "‚úÖ –ß–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω"
    )


@user.on.message_handler(FromMe(), text="<prefix:service_prefix> –∞–≤—Ç–æ–∑–∞—Ä–∞–∂–µ–Ω–∏–µ")
@logger_decorator
async def show_auto_infection_wrapper(message: Message, **kwargs):
    db = Database.get_current()
    jobs = const.scheduler.get_jobs()
    next_run_time = None
    for job in jobs:
        if job.id == 'auto_infection_timer':
            next_run_time = job.next_run_time
    text = (
        f"‚ò¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è:\n"
        f"{'–ó–∞–ø—É—â–µ–Ω' if db.auto_infection else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞—Ä–∞–∂–µ–Ω–∏—è: {db.auto_infection_interval} —Å–µ–∫.\n"
        f"üß® –ê—Ä–≥—É–º–µ–Ω—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏—è: {db.auto_infection_argument}\n"
        f"üí¨ –ß–∞—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏—è: {db.auto_infection_peer_id}\n\n"
    )
    if next_run_time:
        text += f'‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_time.strftime("%Y-%m-%d %H:%M:%S")}'
    await edit_message(message, text)
